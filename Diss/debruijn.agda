module debruijn where

import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; cong)
open Eq.‚â°-Reasoning
open import posets2 using (domain; flat-domain; chain; monotone-fun; inj; x‚âºx; z‚âºn; function-domain; cont-fun; ‚ä•‚ÇÅ; tarski-fix; least-pre-fixed; domain-product; poset; chain-map; chain-complete-flat-domain-pos-B; tarski-continuous )
open import Data.Nat using (‚Ñï; zero; suc; _<_; _‚â§?_; z‚â§n; s‚â§s; _+_)
open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.Bool using (Bool; true; false)
open import Relation.Nullary using (¬¨_)
open import Relation.Nullary.Decidable using (True; toWitness)
open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to ‚ü®_,_‚ü©) 

infix 4 _‚ä¢_
infix 4 _‚àã_
infixl 5 _,_

infixr 7 _‚áí_

infix 5 ∆õ_
infix 5 Œº_
infixl 7 _¬∑_
infix 8 `suc_
infix 9 `_
infix 9 S_
infix 9 #_

data Type : Set where
  _‚áí_ : Type ‚Üí Type ‚Üí Type
  `‚Ñï : Type
  `bool : Type

data Context : Set where
  ‚àÖ : Context
  _,_ : Context ‚Üí Type ‚Üí Context

data _‚àã_ : Context ‚Üí Type ‚Üí Set where

  Z : ‚àÄ {Œì A}
    ‚Üí Œì , A ‚àã A

  S_ : ‚àÄ {Œì A B}
    ‚Üí Œì ‚àã A
    ‚Üí Œì , B ‚àã A


data _‚ä¢_ : Context ‚Üí Type ‚Üí Set where
  `_ : ‚àÄ {Œì A}
    ‚Üí Œì ‚àã A
    ‚Üí Œì ‚ä¢ A

  ∆õ_ : ‚àÄ {Œì A B}
    ‚Üí Œì , A ‚ä¢ B
    ‚Üí Œì ‚ä¢ A ‚áí B

  _¬∑_ : ‚àÄ {Œì A B}
    ‚Üí Œì ‚ä¢ A ‚áí B
    ‚Üí Œì ‚ä¢ A
    ‚Üí Œì ‚ä¢ B

  `zero : ‚àÄ {Œì}
    ‚Üí Œì ‚ä¢ `‚Ñï

  `is-zero_ : ‚àÄ {Œì}
    ‚Üí Œì ‚ä¢ `‚Ñï
    ‚Üí Œì ‚ä¢ `bool

  `suc_ : ‚àÄ {Œì}
    ‚Üí Œì ‚ä¢ `‚Ñï
    ‚Üí Œì ‚ä¢ `‚Ñï

  `pred_ : ‚àÄ {Œì}
    ‚Üí Œì ‚ä¢ `‚Ñï
    ‚Üí Œì ‚ä¢ `‚Ñï

  `true : ‚àÄ {Œì}
    ‚Üí Œì ‚ä¢ `bool

  `false : ‚àÄ {Œì}
    ‚Üí Œì ‚ä¢ `bool

  if_then_else_ : ‚àÄ {Œì A}
    ‚Üí Œì ‚ä¢ `bool
    ‚Üí Œì ‚ä¢ A
    ‚Üí Œì ‚ä¢ A
    ‚Üí Œì ‚ä¢ A

  Œº_ : ‚àÄ {Œì A}
    ‚Üí Œì ‚ä¢ A ‚áí A
    ‚Üí Œì ‚ä¢ A

length : Context ‚Üí ‚Ñï
length ‚àÖ = zero
length (Œì , _) = suc (length Œì)

lookup : {Œì : Context} ‚Üí {n : ‚Ñï} ‚Üí (p : n < length Œì) ‚Üí Type
lookup {(_ , A)} {zero} (s‚â§s z‚â§n) = A
lookup {(Œì , _)} {suc n} (s‚â§s p) = lookup p

count : ‚àÄ {Œì} ‚Üí {n : ‚Ñï} ‚Üí (p : n < length Œì) ‚Üí Œì ‚àã lookup p
count {_ , _} {zero} (s‚â§s z‚â§n) = Z
count {Œì , _} {(suc n)} (s‚â§s p) = S (count p)

#_ : ‚àÄ {Œì} ‚Üí (n : ‚Ñï) ‚Üí {n‚ààŒì : True (suc n ‚â§? length Œì)} ‚Üí Œì ‚ä¢ lookup (toWitness n‚ààŒì)

#_ n {n‚ààŒì} = ` count (toWitness n‚ààŒì)

ext : ‚àÄ {Œì Œî} ‚Üí (‚àÄ {A} ‚Üí Œì ‚àã A ‚Üí Œî ‚àã A) ‚Üí (‚àÄ {A B} ‚Üí Œì , B ‚àã A ‚Üí Œî , B ‚àã A)
ext œÅ Z     = Z
ext œÅ (S x) = S œÅ x

rename : ‚àÄ {Œì Œî} ‚Üí (‚àÄ {A} ‚Üí Œì ‚àã A ‚Üí Œî ‚àã A) ‚Üí (‚àÄ {A} ‚Üí Œì ‚ä¢ A ‚Üí Œî ‚ä¢ A)
rename œÅ (` x) = ` œÅ x
rename œÅ (∆õ N) = ∆õ rename (ext œÅ) N
rename œÅ (L ¬∑ M) = (rename œÅ L) ¬∑ (rename œÅ M)
rename œÅ `zero = `zero
rename œÅ (`suc M) = `suc (rename œÅ M)
rename œÅ (Œº N) = Œº (rename œÅ N)
rename œÅ `true = `true
rename œÅ `false = `false
rename œÅ (`is-zero y) = `is-zero (rename œÅ y)
rename œÅ (`pred y) = `pred rename œÅ y
rename œÅ (if b then x else y) = if (rename œÅ b) then (rename œÅ x) else (rename œÅ y)


exts : ‚àÄ {Œì Œî} ‚Üí (‚àÄ {A} ‚Üí Œì ‚àã A ‚Üí Œî ‚ä¢ A) ‚Üí (‚àÄ {A B} ‚Üí Œì , B ‚àã A ‚Üí Œî , B ‚ä¢ A)
exts œÉ Z     = ` Z
exts œÉ (S x) = rename S_ (œÉ x)

subst : ‚àÄ {Œì Œî} ‚Üí (‚àÄ {A} ‚Üí Œì ‚àã A ‚Üí Œî ‚ä¢ A) ‚Üí (‚àÄ {A} ‚Üí Œì ‚ä¢ A ‚Üí Œî ‚ä¢ A)
subst œÉ (` x) = œÉ x
subst œÉ (∆õ L) = ∆õ subst (exts œÉ) L
subst œÉ (L ¬∑ M) = (subst œÉ L) ¬∑ (subst œÉ M) 
subst œÉ `zero = `zero
subst œÉ (`suc x) = `suc (subst œÉ x)
subst œÉ (Œº L) = Œº subst œÉ L
subst œÉ `true = `true
subst œÉ `false = `false
subst œÉ (`is-zero x) = `is-zero (subst œÉ x)
subst œÉ (`pred x) = `pred (subst œÉ x)
subst œÉ (if b then x else y) = if (subst œÉ b) then (subst œÉ x) else (subst œÉ y)

_[_] : ‚àÄ {Œì A B} ‚Üí Œì , B ‚ä¢ A ‚Üí Œì ‚ä¢ B ‚Üí Œì ‚ä¢ A
_[_] {Œì} {A} {B} N M = subst {Œì , B} {Œì} œÉ N
  where
  œÉ : ‚àÄ {A} ‚Üí Œì , B ‚àã A ‚Üí Œì ‚ä¢ A
  œÉ Z     = M
  œÉ (S x) = ` x


data Value : ‚àÄ {Œì A} ‚Üí Œì ‚ä¢ A ‚Üí Set where

  V-∆õ : ‚àÄ {Œì A B} {N : Œì , A ‚ä¢ B}
    ‚Üí Value (∆õ N)

  V-zero : ‚àÄ {Œì}
    ‚Üí Value (`zero {Œì})

  V-true : ‚àÄ {Œì}
    ‚Üí Value (`true {Œì})

  V-false : ‚àÄ {Œì}
    ‚Üí Value (`false {Œì})

  V-suc : ‚àÄ {Œì} {V : Œì ‚ä¢ `‚Ñï}
    ‚Üí Value V
    ‚Üí Value (`suc V)

infix 2 _‚Äî‚Üí_

data _‚Äî‚Üí_ : ‚àÄ {Œì A} ‚Üí (Œì ‚ä¢ A) ‚Üí (Œì ‚ä¢ A) ‚Üí Set where

  Œæ-¬∑‚ÇÅ : ‚àÄ {Œì A B} {L L‚Ä≤ : Œì ‚ä¢ A ‚áí B} {M : Œì ‚ä¢ A}
    ‚Üí L ‚Äî‚Üí L‚Ä≤
    ‚Üí L ¬∑ M ‚Äî‚Üí L‚Ä≤ ¬∑ M

  Œæ-¬∑‚ÇÇ : ‚àÄ {Œì A B} {V : Œì ‚ä¢ A ‚áí B} {M M‚Ä≤ : Œì ‚ä¢ A} 
    ‚Üí Value V
    ‚Üí M ‚Äî‚Üí M‚Ä≤
    ‚Üí V ¬∑ M ‚Äî‚Üí V ¬∑ M‚Ä≤

  Œ≤-∆õ : ‚àÄ {Œì A B} {N : Œì , A ‚ä¢ B} {W : Œì ‚ä¢ A}
    ‚Üí Value W
    ‚Üí (∆õ N) ¬∑ W ‚Äî‚Üí N [ W ]

  Œæ-suc : ‚àÄ {Œì} {M M‚Ä≤ : Œì ‚ä¢ `‚Ñï}
    ‚Üí M ‚Äî‚Üí M‚Ä≤
    ‚Üí `suc M ‚Äî‚Üí `suc M‚Ä≤

  Œæ-pred : ‚àÄ {Œì} {M M‚Ä≤ : Œì ‚ä¢ `‚Ñï}
    ‚Üí M ‚Äî‚Üí M‚Ä≤
    ‚Üí `pred M ‚Äî‚Üí `pred M‚Ä≤

  Œ≤-pred‚ÇÅ : ‚àÄ {Œì : Context}
    ‚Üí `pred (`zero) ‚Äî‚Üí `zero {Œì}

  Œ≤-pred‚ÇÇ : ‚àÄ {Œì : Context} {M : Œì ‚ä¢ `‚Ñï}
    ‚Üí Value M
    ‚Üí `pred (`suc M) ‚Äî‚Üí M

  Œæ-if : ‚àÄ {Œì A} {B B‚Ä≤ : Œì ‚ä¢ `bool} {x y : Œì ‚ä¢ A}
    ‚Üí B ‚Äî‚Üí B‚Ä≤
    ‚Üí if B then x else y ‚Äî‚Üí if B‚Ä≤ then x else y
  
  Œ≤-if‚ÇÅ : ‚àÄ {Œì A} {x y : Œì ‚ä¢ A}
    ‚Üí if `true then x else y ‚Äî‚Üí x

  Œ≤-if‚ÇÇ : ‚àÄ {Œì A} {x y : Œì ‚ä¢ A}
    ‚Üí if `false then x else y ‚Äî‚Üí y

  Œ≤-Œº : ‚àÄ {Œì A} {N : Œì ‚ä¢ A ‚áí A}
    ‚Üí Œº N ‚Äî‚Üí N ¬∑ (Œº N)

  Œæ-is-zero : ‚àÄ {Œì} {M M‚Ä≤ : Œì ‚ä¢ `‚Ñï}
    ‚Üí M ‚Äî‚Üí M‚Ä≤
    ‚Üí `is-zero M ‚Äî‚Üí `is-zero M‚Ä≤

  Œ≤-is-zero‚ÇÅ : ‚àÄ {Œì}
    ‚Üí `is-zero `zero ‚Äî‚Üí `true {Œì}

  Œ≤-is-zero‚ÇÇ : ‚àÄ {Œì} {M : Œì ‚ä¢ `‚Ñï}
    ‚Üí Value M
    ‚Üí `is-zero (`suc M) ‚Äî‚Üí `false 

data Progress {A} (M : ‚àÖ ‚ä¢ A) : Set where

  step : ‚àÄ {N : ‚àÖ ‚ä¢ A}
    ‚Üí M ‚Äî‚Üí N
    ‚Üí Progress M

  done :
      Value M
    ‚Üí Progress M

progress : ‚àÄ {A} ‚Üí (M : ‚àÖ ‚ä¢ A) ‚Üí Progress M
progress (∆õ M) = done V-∆õ

progress (L ¬∑ M)  with progress L
...    | step L‚Äî‚ÜíL‚Ä≤               = step (Œæ-¬∑‚ÇÅ L‚Äî‚ÜíL‚Ä≤)
...    | done V-∆õ with progress M 
...        | step M‚Äî‚ÜíM‚Ä≤           = step (Œæ-¬∑‚ÇÇ V-∆õ M‚Äî‚ÜíM‚Ä≤)
...        | done VM              = step (Œ≤-∆õ VM)

progress `zero = done V-zero

progress (`is-zero M) with progress M
...    | step M‚Äî‚ÜíM‚Ä≤      = step (Œæ-is-zero M‚Äî‚ÜíM‚Ä≤)
...    | done (V-zero)   = step Œ≤-is-zero‚ÇÅ
...    | done (V-suc VM) = step (Œ≤-is-zero‚ÇÇ VM)

progress (`suc M) with progress M
...    | step M‚Äî‚ÜíM‚Ä≤ = step (Œæ-suc M‚Äî‚ÜíM‚Ä≤)
...    | done VM    = done (V-suc VM)

progress (`pred M) with progress M
...    | step M‚Äî‚ÜíM‚Ä≤ = step (Œæ-pred M‚Äî‚ÜíM‚Ä≤)
...    | done V-zero = step Œ≤-pred‚ÇÅ
...    | done (V-suc VM) = step (Œ≤-pred‚ÇÇ VM)


progress `true = done V-true
progress `false = done V-false

progress (if B then M else N) with progress B
...    | step L‚Äî‚ÜíL‚Ä≤   = step (Œæ-if L‚Äî‚ÜíL‚Ä≤)
...    | done V-true  = step Œ≤-if‚ÇÅ
...    | done V-false = step Œ≤-if‚ÇÇ
progress (Œº M) = step Œ≤-Œº


infix 3 _‚ä¢_‚Üì_

data _‚ä¢_‚Üì_ : ‚àÄ{Œì A} ‚Üí Œì ‚ä¢ A ‚Üí Set where

‚Ñï‚ä• : domain
ùîπ‚ä• : domain

‚Ñï‚ä• = flat-domain ‚Ñï
ùîπ‚ä• = flat-domain Bool

‚ü¶_‚üß : Type ‚Üí domain
‚ü¶ `‚Ñï ‚üß = ‚Ñï‚ä•
‚ü¶ `bool ‚üß = ùîπ‚ä•
‚ü¶ œÑ ‚áí œÑ‚Ä≤ ‚üß = function-domain ‚ü¶ œÑ ‚üß ‚ü¶ œÑ‚Ä≤ ‚üß


data ‚ä•-set : Set where
  ‚ä•‚ÇÇ : ‚ä•-set

data _‚ä•‚âº_ : ‚ä•-set ‚Üí ‚ä•-set ‚Üí Set where
  ‚ä•‚âº‚ä• : ‚ä•‚ÇÇ ‚ä•‚âº ‚ä•‚ÇÇ 

‚ä•‚âº-refl : {a : ‚ä•-set} ‚Üí a ‚ä•‚âº a
‚ä•‚âº-refl {‚ä•‚ÇÇ} = ‚ä•‚âº‚ä•

‚ä•‚âº-antisym : {a b : ‚ä•-set} ‚Üí a ‚ä•‚âº b ‚Üí b ‚ä•‚âº a ‚Üí a ‚â° b
‚ä•‚âº-antisym ‚ä•‚âº‚ä• ‚ä•‚âº‚ä• = refl

‚ä•‚âº-trans : {a b c : ‚ä•-set} ‚Üí a ‚ä•‚âº b ‚Üí b ‚ä•‚âº c ‚Üí a ‚ä•‚âº c
‚ä•‚âº-trans ‚ä•‚âº‚ä• ‚ä•‚âº‚ä• = ‚ä•‚âº‚ä•

context-‚ü¶_‚üß : Context ‚Üí domain
context-‚ü¶ ‚àÖ ‚üß = record { pos = record
                                 { A = ‚ä•-set
                                 ; R = _‚ä•‚âº_
                                 ; reflexive = ‚ä•‚âº-refl
                                 ; antisymmetric = ‚ä•‚âº-antisym
                                 ; transitive = ‚ä•‚âº-trans
                                 }
                       ; chain-complete = {!!}
                       ; bottom = {!!}
                       }


--context-‚ü¶ Œì , x ‚üß = posets2.domain-dependent-product (‚àÄ {A} ‚Üí Œì ‚àã A ) Œª œÑ ‚Üí ‚ü¶ x ‚üß
context-‚ü¶ Œì , x ‚üß = domain-product context-‚ü¶ Œì ‚üß ‚ü¶ x ‚üß


constant-fun-is-cont : ‚àÄ {B : Set} ‚Üí {D : domain} ‚Üí B ‚Üí cont-fun D (flat-domain B)
constant-fun-is-cont-mon : ‚àÄ {B : Set} ‚Üí {D : domain} ‚Üí B ‚Üí monotone-fun (domain.pos D) (domain.pos (flat-domain B))
constant-fun-is-cont-mon {B} {D} b = record { g = Œª x ‚Üí inj b
                                            ; mon = Œª x ‚Üí x‚âºx
                                            }
constant-fun-is-cont {B} {D} b = record { mon = constant-fun-is-cont-mon {B} {D} b
                                        ; lub-preserve = Œª c ‚Üí poset.antisymmetric (domain.pos (flat-domain B))
                                            (posets2.lub.lub1
                                              {domain.pos (flat-domain B)}
                                              {chain-map c (constant-fun-is-cont-mon {B} {D} b)}
                                              (chain-complete-flat-domain-pos-B (chain-map c (constant-fun-is-cont-mon {B} {D} b)))
                                              {0}
                                            )
                                            (posets2.lub.lub2
                                              {domain.pos (flat-domain B)}
                                              {chain-map c (constant-fun-is-cont-mon {B} {D} b)}
                                              (chain-complete-flat-domain-pos-B (chain-map c (constant-fun-is-cont-mon {B} {D} b)))
                                              {inj b}
                                              (Œª {n} ‚Üí x‚âºx)
                                            )
                                        }

pair-f : ‚àÄ {D D‚ÇÅ D‚ÇÇ : domain} ‚Üí cont-fun D D‚ÇÅ ‚Üí cont-fun D D‚ÇÇ ‚Üí cont-fun D (domain-product D‚ÇÅ D‚ÇÇ)
pair-f f‚ÇÅ f‚ÇÇ = record { mon = record { g = Œª d ‚Üí ‚ü® monotone-fun.g (cont-fun.mon f‚ÇÅ) d , monotone-fun.g (cont-fun.mon f‚ÇÇ) d ‚ü©
                                     ; mon = Œª a‚â§a‚Ä≤ ‚Üí ‚ü® monotone-fun.mon (cont-fun.mon f‚ÇÅ) a‚â§a‚Ä≤ , monotone-fun.mon (cont-fun.mon f‚ÇÇ) a‚â§a‚Ä≤ ‚ü©
                                     }
                      ; lub-preserve = {!!}
                      }


case_of_ : ‚àÄ {a b} {A : Set a} {B : Set b} ‚Üí A ‚Üí (A ‚Üí B) ‚Üí B
case x of f = f x

case_return_of_ : ‚àÄ {a b} {A : Set a} (x : A) (B : A ‚Üí Set b) ‚Üí (‚àÄ x ‚Üí B x) ‚Üí B x
case x return B of f = f x

_‚àò_ : ‚àÄ {D‚ÇÅ D‚ÇÇ D‚ÇÉ} ‚Üí cont-fun D‚ÇÇ D‚ÇÉ ‚Üí cont-fun D‚ÇÅ D‚ÇÇ ‚Üí cont-fun D‚ÇÅ D‚ÇÉ

‚àò-mon : ‚àÄ {D‚ÇÅ D‚ÇÇ D‚ÇÉ} ‚Üí cont-fun D‚ÇÇ D‚ÇÉ ‚Üí cont-fun D‚ÇÅ D‚ÇÇ ‚Üí monotone-fun (domain.pos D‚ÇÅ) (domain.pos D‚ÇÉ)
‚àò-mon g f = record { g = Œª x ‚Üí monotone-fun.g (cont-fun.mon g) (monotone-fun.g (cont-fun.mon f) x)
                   ; mon = Œª a‚â§a‚Ä≤ ‚Üí monotone-fun.mon (cont-fun.mon g) (monotone-fun.mon (cont-fun.mon f) a‚â§a‚Ä≤)
                   }


_‚àò_ {D‚ÇÅ = D‚ÇÅ} {D‚ÇÇ = D‚ÇÇ} {D‚ÇÉ = D‚ÇÉ} g f  =
                     record { mon = ‚àò-mon g f
                            ; lub-preserve = Œª c ‚Üí
                            begin
                              monotone-fun.g (cont-fun.mon g)
                                (monotone-fun.g (cont-fun.mon f)
                                  (posets2.lub.‚äî (domain.chain-complete D‚ÇÅ c)))
                            ‚â°‚ü® cong (monotone-fun.g (cont-fun.mon g)) (cont-fun.lub-preserve f c) ‚ü©
                              monotone-fun.g (cont-fun.mon g)
                                (posets2.lub.‚äî
                                 (domain.chain-complete D‚ÇÇ (chain-map c (cont-fun.mon f))))
                            ‚â°‚ü® cont-fun.lub-preserve g (chain-map c (cont-fun.mon f)) ‚ü©
                              posets2.lub.‚äî (domain.chain-complete D‚ÇÉ (chain-map c (‚àò-mon g f)))
                            ‚àé 
                            }

s‚ä• : cont-fun ‚Ñï‚ä• ‚Ñï‚ä•
s‚ä•-mon : monotone-fun (domain.pos ‚Ñï‚ä•) (domain.pos ‚Ñï‚ä•)
s‚ä•-mon = record { g = (Œª { (inj n) ‚Üí inj (suc n) ; ‚ä•‚ÇÅ ‚Üí ‚ä•‚ÇÅ }) 
                           ; mon = Œª { z‚âºn ‚Üí z‚âºn ; x‚âºx ‚Üí x‚âºx }
                           }
s‚ä• = record { mon =  s‚ä•-mon
            ; lub-preserve = {!!}
            }

z‚ä• : cont-fun ‚Ñï‚ä• ùîπ‚ä•
z‚ä•-mon : monotone-fun (domain.pos ‚Ñï‚ä•) (domain.pos ùîπ‚ä•)
z‚ä•-mon = record { g = Œª { (inj 0) ‚Üí (inj true); ‚ä•‚ÇÅ ‚Üí ‚ä•‚ÇÅ; (inj (suc n)) ‚Üí inj false}
                ; mon = Œª {z‚âºn ‚Üí z‚âºn; x‚âºx ‚Üí x‚âºx} 
                }
z‚ä• = record { mon = z‚ä•-mon
            ; lub-preserve = {!!}
            }

p‚ä• : cont-fun ‚Ñï‚ä• ‚Ñï‚ä•
p‚ä•-mon : monotone-fun (domain.pos ‚Ñï‚ä•) (domain.pos ‚Ñï‚ä•)
p‚ä•-mon = record { g = Œª { (inj (suc n)) ‚Üí (inj n); _ ‚Üí ‚ä•‚ÇÅ}
                ; mon = Œª { z‚âºn ‚Üí z‚âºn ; x‚âºx ‚Üí x‚âºx }
                }
p‚ä• = record { mon = p‚ä•-mon
            ; lub-preserve = {!!}
            }

if-cont : ‚àÄ {D} ‚Üí cont-fun (domain-product ùîπ‚ä• (domain-product D D)) D
if-mon : ‚àÄ {D} ‚Üí monotone-fun (posets2.product-pos ùîπ‚ä• (domain-product D D)) (domain.pos D)
if-mon {D} = record { g = (Œª { ‚ü® inj true , ‚ü® d , _ ‚ü© ‚ü© ‚Üí d
                             ; ‚ü® inj false , ‚ü® _ , d‚Ä≤ ‚ü© ‚ü© ‚Üí d‚Ä≤
                             ; ‚ü® ‚ä•‚ÇÅ , ‚ü® _ , _ ‚ü© ‚ü© ‚Üí posets2.least-element.‚ä• (domain.bottom D)
                             })
                    ; mon = Œª { {‚ü® ‚ä•‚ÇÅ , b‚ÇÅ ‚ü©} ‚Üí Œª a‚â§a‚Ä≤ ‚Üí (posets2.least-element.‚ä•-is-bottom (domain.bottom D))
                              ; {‚ü® inj true , _ ‚ü©} {‚ü® inj true , _ ‚ü©} ‚Üí Œª a‚â§a‚Ä≤ ‚Üí proj‚ÇÅ (proj‚ÇÇ a‚â§a‚Ä≤)
                              ; {‚ü® inj false , _ ‚ü©} {‚ü® inj false , _ ‚ü©} ‚Üí Œª a‚â§a‚Ä≤ ‚Üí proj‚ÇÇ (proj‚ÇÇ a‚â§a‚Ä≤)
                              }
                    }
if-cont {D} = record { mon = if-mon {D}
                     ; lub-preserve = {!!}
                     }

ev-cont : ‚àÄ {D E} ‚Üí cont-fun (domain-product (function-domain D E) D) E
ev-mon : ‚àÄ {D E} ‚Üí monotone-fun (posets2.product-pos (function-domain D E) D) (domain.pos E)
ev-mon {D} {E} = record { g = Œª {‚ü® f , d ‚ü© ‚Üí monotone-fun.g (cont-fun.mon f) d}
                        ; mon = Œª { {‚ü® f , d ‚ü©} {‚ü® f‚Ä≤ , d‚Ä≤ ‚ü©} ‚ü® f‚â§f‚Ä≤ , d‚â§d‚Ä≤ ‚ü© ‚Üí
                          poset.transitive (domain.pos E)
                            (monotone-fun.mon (cont-fun.mon f) d‚â§d‚Ä≤)
                            (f‚â§f‚Ä≤ {d‚Ä≤}) }
                        }
ev-cont = record { mon = ev-mon
                 ; lub-preserve = {!!}
                 }


constant-fun : ‚àÄ {Œì} ‚Üí (B : Set) ‚Üí B ‚Üí cont-fun context-‚ü¶ Œì ‚üß (flat-domain B)
constant-fun B b = constant-fun-is-cont b


‚ü¶_‚ä¢‚Ä≤_‚üß : ‚àÄ {A} ‚Üí (Œì : Context) ‚Üí (M : Œì ‚ä¢ A) ‚Üí cont-fun context-‚ü¶ Œì ‚üß ‚ü¶ A ‚üß
‚ü¶ Œì ‚ä¢‚Ä≤ `zero ‚üß = constant-fun {Œì} ‚Ñï 0
‚ü¶ Œì ‚ä¢‚Ä≤ `true ‚üß = constant-fun {Œì} Bool true
‚ü¶ Œì ‚ä¢‚Ä≤ `false ‚üß = constant-fun {Œì} Bool false
‚ü¶ Œì ‚ä¢‚Ä≤ M‚ÇÅ ¬∑ M‚ÇÇ ‚üß = ev-cont ‚àò (pair-f ‚ü¶ Œì ‚ä¢‚Ä≤ M‚ÇÅ ‚üß ‚ü¶ Œì ‚ä¢‚Ä≤ M‚ÇÇ ‚üß) 
‚ü¶ Œì ‚ä¢‚Ä≤ `is-zero N ‚üß = z‚ä• ‚àò ‚ü¶ Œì ‚ä¢‚Ä≤ N ‚üß
‚ü¶ Œì ‚ä¢‚Ä≤ `suc N ‚üß = s‚ä• ‚àò ‚ü¶ Œì ‚ä¢‚Ä≤ N ‚üß
‚ü¶ Œì ‚ä¢‚Ä≤ `pred N ‚üß = p‚ä• ‚àò ‚ü¶ Œì ‚ä¢‚Ä≤ N ‚üß
‚ü¶ Œì ‚ä¢‚Ä≤ if M‚ÇÅ then M‚ÇÇ else M‚ÇÉ ‚üß = if-cont ‚àò (pair-f ‚ü¶ Œì ‚ä¢‚Ä≤ M‚ÇÅ ‚üß (pair-f ‚ü¶ Œì ‚ä¢‚Ä≤ M‚ÇÇ ‚üß ‚ü¶ Œì ‚ä¢‚Ä≤ M‚ÇÉ ‚üß))
‚ü¶ Œì ‚ä¢‚Ä≤ ` x ‚üß = record { mon = record { g = Œª œÅ ‚Üí {! œÅ !}
                                     ; mon = {!!}
                                     }
                      ; lub-preserve = {!!}
                      }
‚ü¶ Œì ‚ä¢‚Ä≤ ∆õ M ‚üß = record { mon = record { g = Œª œÅ ‚Üí record
                                                 { mon = record { g = Œª d ‚Üí {!!}
                                                                ; mon = {!!}
                                                                }
                                                 ; lub-preserve = {!!}
                                                 }
                                     ; mon = {!!} }
                      ; lub-preserve = {!!} }
‚ü¶ Œì ‚ä¢‚Ä≤ Œº M ‚üß = tarski-continuous ‚àò ‚ü¶ Œì ‚ä¢‚Ä≤ M ‚üß 

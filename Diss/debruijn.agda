module debruijn where

import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; cong)
open Eq.‚â°-Reasoning
open import posets2
open import ev-cont using (ev-cont)
open import if-cont using (if-cont)
open import cur-cont using (cur-cont)
open import useful-functions using (‚Ñï‚ä•; ùîπ‚ä•; _‚àò_; constant-fun-is-cont; pair-f; extend-function; domain-dependent-projection)
open import Data.Nat using (‚Ñï; zero; suc; _<_; _‚â§?_; z‚â§n; s‚â§s; _+_; _‚â§_)
open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.Bool using (Bool; true; false)
open import Relation.Nullary using (¬¨_)
open import Relation.Nullary.Decidable using (True; toWitness)
open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to ‚ü®_,_‚ü©) 

open poset
open domain
open monotone-fun
open cont-fun
open lub
open chain

infix 4 _‚ä¢_
infix 4 _‚àã_
infixl 5 _,_

infixr 7 _‚áí_

infix 5 ∆õ_
infix 5 Œº_
infixl 7 _¬∑_
infix 8 `suc_
infix 9 `_
infix 9 S_

data Type : Set where
  _‚áí_ : Type ‚Üí Type ‚Üí Type
  `‚Ñï : Type
  `bool : Type

data Context : Set where
  ‚àÖ : Context
  _,_ : Context ‚Üí Type ‚Üí Context

data _‚àã_ : Context ‚Üí Type ‚Üí Set where

  Z : ‚àÄ {Œì A}
    ‚Üí Œì , A ‚àã A

  S_ : ‚àÄ {Œì A B}
    ‚Üí Œì ‚àã A
    ‚Üí Œì , B ‚àã A


data _‚ä¢_ : Context ‚Üí Type ‚Üí Set where
  `_ : ‚àÄ {Œì A}
    ‚Üí Œì ‚àã A
    ‚Üí Œì ‚ä¢ A

  ∆õ_ : ‚àÄ {Œì A B}
    ‚Üí Œì , A ‚ä¢ B
    ‚Üí Œì ‚ä¢ A ‚áí B

  _¬∑_ : ‚àÄ {Œì A B}
    ‚Üí Œì ‚ä¢ A ‚áí B
    ‚Üí Œì ‚ä¢ A
    ‚Üí Œì ‚ä¢ B

  `zero : ‚àÄ {Œì}
    ‚Üí Œì ‚ä¢ `‚Ñï

  `is-zero_ : ‚àÄ {Œì}
    ‚Üí Œì ‚ä¢ `‚Ñï
    ‚Üí Œì ‚ä¢ `bool

  `suc_ : ‚àÄ {Œì}
    ‚Üí Œì ‚ä¢ `‚Ñï
    ‚Üí Œì ‚ä¢ `‚Ñï

  `pred_ : ‚àÄ {Œì}
    ‚Üí Œì ‚ä¢ `‚Ñï
    ‚Üí Œì ‚ä¢ `‚Ñï

  `true : ‚àÄ {Œì}
    ‚Üí Œì ‚ä¢ `bool

  `false : ‚àÄ {Œì}
    ‚Üí Œì ‚ä¢ `bool

  if_then_else_ : ‚àÄ {Œì A}
    ‚Üí Œì ‚ä¢ `bool
    ‚Üí Œì ‚ä¢ A
    ‚Üí Œì ‚ä¢ A
    ‚Üí Œì ‚ä¢ A

  Œº_ : ‚àÄ {Œì A}
    ‚Üí Œì ‚ä¢ A ‚áí A
    ‚Üí Œì ‚ä¢ A

length : Context ‚Üí ‚Ñï
length ‚àÖ = zero
length (Œì , _) = suc (length Œì)

lookup : {Œì : Context} ‚Üí {n : ‚Ñï} ‚Üí (p : n < length Œì) ‚Üí Type
lookup {(_ , A)} {zero} (s‚â§s z‚â§n) = A
lookup {(Œì , _)} {suc n} (s‚â§s p) = lookup p

lookup‚ÇÇ : {Œì : Context} ‚Üí (n : Fin (length Œì)) ‚Üí Type
lookup‚ÇÇ {(_ , A)} (fzero) = A
lookup‚ÇÇ {(Œì , _)} (fsucc x) = lookup‚ÇÇ {Œì} x

count : ‚àÄ {Œì} ‚Üí {n : Fin (length Œì)} ‚Üí Œì ‚àã lookup‚ÇÇ {Œì} n
count {Œì , x} {fzero} = Z
count {Œì , x} {fsucc n} = S (count {Œì} {n})

conv : ‚àÄ {x} ‚Üí {Œì : Context} ‚Üí (Œì ‚àã x) ‚Üí Fin (length Œì)
conv Z = fzero
conv (S Œì‚àãx) = fsucc (conv Œì‚àãx)

conv‚ÇÇ : {y : ‚Ñï} (x : ‚Ñï) ‚Üí x < y ‚Üí Fin y
conv‚ÇÇ zero (s‚â§s x<y) = fzero
conv‚ÇÇ (suc x) (s‚â§s x<y) = fsucc (conv‚ÇÇ x x<y) 

#_ : ‚àÄ {Œì} ‚Üí (n : Fin (length Œì)) ‚Üí Œì ‚ä¢ lookup‚ÇÇ n
#_ n = ` (count {n = n}) 

ext : ‚àÄ {Œì Œî} ‚Üí (‚àÄ {A} ‚Üí Œì ‚àã A ‚Üí Œî ‚àã A) ‚Üí (‚àÄ {A B} ‚Üí Œì , B ‚àã A ‚Üí Œî , B ‚àã A)
ext œÅ Z     = Z
ext œÅ (S x) = S œÅ x

rename : ‚àÄ {Œì Œî} ‚Üí (‚àÄ {A} ‚Üí Œì ‚àã A ‚Üí Œî ‚àã A) ‚Üí (‚àÄ {A} ‚Üí Œì ‚ä¢ A ‚Üí Œî ‚ä¢ A)
rename œÅ (` x) = ` œÅ x
rename œÅ (∆õ N) = ∆õ rename (ext œÅ) N
rename œÅ (L ¬∑ M) = (rename œÅ L) ¬∑ (rename œÅ M)
rename œÅ `zero = `zero
rename œÅ (`suc M) = `suc (rename œÅ M)
rename œÅ (Œº N) = Œº (rename œÅ N)
rename œÅ `true = `true
rename œÅ `false = `false
rename œÅ (`is-zero y) = `is-zero (rename œÅ y)
rename œÅ (`pred y) = `pred rename œÅ y
rename œÅ (if b then x else y) = if (rename œÅ b) then (rename œÅ x) else (rename œÅ y)


exts : ‚àÄ {Œì Œî} ‚Üí (‚àÄ {A} ‚Üí Œì ‚àã A ‚Üí Œî ‚ä¢ A) ‚Üí (‚àÄ {A B} ‚Üí Œì , B ‚àã A ‚Üí Œî , B ‚ä¢ A)
exts œÉ Z     = ` Z
exts œÉ (S x) = rename S_ (œÉ x)

subst : ‚àÄ {Œì Œî} ‚Üí (‚àÄ {A} ‚Üí Œì ‚àã A ‚Üí Œî ‚ä¢ A) ‚Üí (‚àÄ {A} ‚Üí Œì ‚ä¢ A ‚Üí Œî ‚ä¢ A)
subst œÉ (` x) = œÉ x
subst œÉ (∆õ L) = ∆õ subst (exts œÉ) L
subst œÉ (L ¬∑ M) = (subst œÉ L) ¬∑ (subst œÉ M) 
subst œÉ `zero = `zero
subst œÉ (`suc x) = `suc (subst œÉ x)
subst œÉ (Œº L) = Œº subst œÉ L
subst œÉ `true = `true
subst œÉ `false = `false
subst œÉ (`is-zero x) = `is-zero (subst œÉ x)
subst œÉ (`pred x) = `pred (subst œÉ x)
subst œÉ (if b then x else y) = if (subst œÉ b) then (subst œÉ x) else (subst œÉ y)

_[_] : ‚àÄ {Œì A B} ‚Üí Œì , B ‚ä¢ A ‚Üí Œì ‚ä¢ B ‚Üí Œì ‚ä¢ A
_[_] {Œì} {A} {B} N M = subst {Œì , B} {Œì} œÉ N
  where
  œÉ : ‚àÄ {A} ‚Üí Œì , B ‚àã A ‚Üí Œì ‚ä¢ A
  œÉ Z     = M
  œÉ (S x) = ` x


data Value : ‚àÄ {Œì A} ‚Üí Œì ‚ä¢ A ‚Üí Set where

  V-∆õ : ‚àÄ {Œì A B} {N : Œì , A ‚ä¢ B}
    ‚Üí Value (∆õ N)

  V-zero : ‚àÄ {Œì}
    ‚Üí Value (`zero {Œì})

  V-true : ‚àÄ {Œì}
    ‚Üí Value (`true {Œì})

  V-false : ‚àÄ {Œì}
    ‚Üí Value (`false {Œì})

  V-suc : ‚àÄ {Œì} {V : Œì ‚ä¢ `‚Ñï}
    ‚Üí Value V
    ‚Üí Value (`suc V)

infix 2 _‚Äî‚Üí_

data _‚Äî‚Üí_ : ‚àÄ {Œì A} ‚Üí (Œì ‚ä¢ A) ‚Üí (Œì ‚ä¢ A) ‚Üí Set where

  Œæ-¬∑‚ÇÅ : ‚àÄ {Œì A B} {L L‚Ä≤ : Œì ‚ä¢ A ‚áí B} {M : Œì ‚ä¢ A}
    ‚Üí L ‚Äî‚Üí L‚Ä≤
    ‚Üí L ¬∑ M ‚Äî‚Üí L‚Ä≤ ¬∑ M

  Œæ-¬∑‚ÇÇ : ‚àÄ {Œì A B} {V : Œì ‚ä¢ A ‚áí B} {M M‚Ä≤ : Œì ‚ä¢ A} 
    ‚Üí Value V
    ‚Üí M ‚Äî‚Üí M‚Ä≤
    ‚Üí V ¬∑ M ‚Äî‚Üí V ¬∑ M‚Ä≤

  Œ≤-∆õ : ‚àÄ {Œì A B} {N : Œì , A ‚ä¢ B} {W : Œì ‚ä¢ A}
    ‚Üí Value W
    ‚Üí (∆õ N) ¬∑ W ‚Äî‚Üí N [ W ]

  Œæ-suc : ‚àÄ {Œì} {M M‚Ä≤ : Œì ‚ä¢ `‚Ñï}
    ‚Üí M ‚Äî‚Üí M‚Ä≤
    ‚Üí `suc M ‚Äî‚Üí `suc M‚Ä≤

  Œæ-pred : ‚àÄ {Œì} {M M‚Ä≤ : Œì ‚ä¢ `‚Ñï}
    ‚Üí M ‚Äî‚Üí M‚Ä≤
    ‚Üí `pred M ‚Äî‚Üí `pred M‚Ä≤

  Œ≤-pred‚ÇÅ : ‚àÄ {Œì : Context}
    ‚Üí `pred (`zero) ‚Äî‚Üí `zero {Œì}

  Œ≤-pred‚ÇÇ : ‚àÄ {Œì : Context} {M : Œì ‚ä¢ `‚Ñï}
    ‚Üí Value M
    ‚Üí `pred (`suc M) ‚Äî‚Üí M

  Œæ-if : ‚àÄ {Œì A} {B B‚Ä≤ : Œì ‚ä¢ `bool} {x y : Œì ‚ä¢ A}
    ‚Üí B ‚Äî‚Üí B‚Ä≤
    ‚Üí if B then x else y ‚Äî‚Üí if B‚Ä≤ then x else y
  
  Œ≤-if‚ÇÅ : ‚àÄ {Œì A} {x y : Œì ‚ä¢ A}
    ‚Üí if `true then x else y ‚Äî‚Üí x

  Œ≤-if‚ÇÇ : ‚àÄ {Œì A} {x y : Œì ‚ä¢ A}
    ‚Üí if `false then x else y ‚Äî‚Üí y

  Œ≤-Œº : ‚àÄ {Œì A} {N : Œì ‚ä¢ A ‚áí A}
    ‚Üí Œº N ‚Äî‚Üí N ¬∑ (Œº N)

  Œæ-is-zero : ‚àÄ {Œì} {M M‚Ä≤ : Œì ‚ä¢ `‚Ñï}
    ‚Üí M ‚Äî‚Üí M‚Ä≤
    ‚Üí `is-zero M ‚Äî‚Üí `is-zero M‚Ä≤

  Œ≤-is-zero‚ÇÅ : ‚àÄ {Œì}
    ‚Üí `is-zero `zero ‚Äî‚Üí `true {Œì}

  Œ≤-is-zero‚ÇÇ : ‚àÄ {Œì} {M : Œì ‚ä¢ `‚Ñï}
    ‚Üí Value M
    ‚Üí `is-zero (`suc M) ‚Äî‚Üí `false 

data Progress {A} (M : ‚àÖ ‚ä¢ A) : Set where

  step : ‚àÄ {N : ‚àÖ ‚ä¢ A}
    ‚Üí M ‚Äî‚Üí N
    ‚Üí Progress M

  done :
      Value M
    ‚Üí Progress M

progress : ‚àÄ {A} ‚Üí (M : ‚àÖ ‚ä¢ A) ‚Üí Progress M
progress (∆õ M) = done V-∆õ

progress (L ¬∑ M)  with progress L
...    | step L‚Äî‚ÜíL‚Ä≤               = step (Œæ-¬∑‚ÇÅ L‚Äî‚ÜíL‚Ä≤)
...    | done V-∆õ with progress M 
...        | step M‚Äî‚ÜíM‚Ä≤           = step (Œæ-¬∑‚ÇÇ V-∆õ M‚Äî‚ÜíM‚Ä≤)
...        | done VM              = step (Œ≤-∆õ VM)

progress `zero = done V-zero

progress (`is-zero M) with progress M
...    | step M‚Äî‚ÜíM‚Ä≤      = step (Œæ-is-zero M‚Äî‚ÜíM‚Ä≤)
...    | done (V-zero)   = step Œ≤-is-zero‚ÇÅ
...    | done (V-suc VM) = step (Œ≤-is-zero‚ÇÇ VM)

progress (`suc M) with progress M
...    | step M‚Äî‚ÜíM‚Ä≤ = step (Œæ-suc M‚Äî‚ÜíM‚Ä≤)
...    | done VM    = done (V-suc VM)

progress (`pred M) with progress M
...    | step M‚Äî‚ÜíM‚Ä≤ = step (Œæ-pred M‚Äî‚ÜíM‚Ä≤)
...    | done V-zero = step Œ≤-pred‚ÇÅ
...    | done (V-suc VM) = step (Œ≤-pred‚ÇÇ VM)


progress `true = done V-true
progress `false = done V-false

progress (if B then M else N) with progress B
...    | step L‚Äî‚ÜíL‚Ä≤   = step (Œæ-if L‚Äî‚ÜíL‚Ä≤)
...    | done V-true  = step Œ≤-if‚ÇÅ
...    | done V-false = step Œ≤-if‚ÇÇ
progress (Œº M) = step Œ≤-Œº


‚ü¶_‚üß : Type ‚Üí domain
‚ü¶ `‚Ñï ‚üß = ‚Ñï‚ä•
‚ü¶ `bool ‚üß = ùîπ‚ä•
‚ü¶ œÑ ‚áí œÑ‚Ä≤ ‚üß = function-domain ‚ü¶ œÑ ‚üß ‚ü¶ œÑ‚Ä≤ ‚üß

context-‚ü¶_‚üß : Context ‚Üí domain
context-‚ü¶ Œì ‚üß = domain-dependent-product (Fin (length Œì)) (Œª x ‚Üí ‚ü¶ lookup‚ÇÇ {Œì} x ‚üß)

helpful-lemma-chain : {Œì : Context} {A : Type} ‚Üí chain (pos (domain-product context-‚ü¶ Œì ‚üß ‚ü¶ A ‚üß)) ‚Üí chain (pos (context-‚ü¶ Œì , A ‚üß))
g (monotone (helpful-lemma-chain c)) = Œª x ‚Üí Œª {fzero ‚Üí g (monotone c) x (fsucc fzero); (fsucc n) ‚Üí g (monotone c) x fzero n}
mon (monotone (helpful-lemma-chain c)) a‚â§a‚Ä≤ fzero = mon (monotone c) a‚â§a‚Ä≤ (fsucc fzero)
mon (monotone (helpful-lemma-chain c)) a‚â§a‚Ä≤ (fsucc i) = mon (monotone c) a‚â§a‚Ä≤ (fzero) i 

helpful-lemma-blah : {Œì : Context} {A B : Type} ‚Üí cont-fun (context-‚ü¶ Œì , A ‚üß) ‚ü¶ B ‚üß ‚Üí cont-fun (domain-product context-‚ü¶ Œì ‚üß ‚ü¶ A ‚üß) ‚ü¶ B ‚üß
mon (helpful-lemma-blah f) = record { g = Œª x ‚Üí g (mon f) Œª {fzero ‚Üí x (fsucc fzero); (fsucc n) ‚Üí x fzero n}
                                    ; mon = Œª a‚â§a‚Ä≤ ‚Üí mon (mon f) Œª {fzero ‚Üí a‚â§a‚Ä≤ (fsucc fzero); (fsucc n) ‚Üí a‚â§a‚Ä≤ fzero n}
                                    }
lub-preserve (helpful-lemma-blah {Œì} {A} {B} f) c =
  begin
    g (mon (helpful-lemma-blah {Œì} {A} {B} f)) (‚äî (chain-complete (domain-product context-‚ü¶ Œì ‚üß ‚ü¶ A ‚üß) c))
  ‚â°‚ü® cong (g (mon f)) (dependent-function-extensionality (Œª {fzero ‚Üí refl; (fsucc n) ‚Üí refl})) ‚ü©
    g (mon f) (‚äî (chain-complete context-‚ü¶ Œì , A ‚üß (helpful-lemma-chain {Œì} {A} c)))
  ‚â°‚ü® lub-preserve f (helpful-lemma-chain c) ‚ü©
    ‚äî (chain-complete ‚ü¶ B ‚üß (chain-map (helpful-lemma-chain c) (mon f)))
  ‚â°‚ü® same-f-same-lub {‚ü¶ B ‚üß}
       {chain-map (helpful-lemma-chain c) (mon f)}
       {chain-map c (mon (helpful-lemma-blah {Œì} {A} {B} f))}
       (function-extensionality
         (Œª x ‚Üí cong (g (mon f))
           (dependent-function-extensionality
             (Œª {fzero ‚Üí refl; (fsucc n) ‚Üí refl}))))
   ‚ü©
    ‚äî (chain-complete ‚ü¶ B ‚üß (chain-map c (mon (helpful-lemma-blah {Œì} {A} {B} f))))
  ‚àé


s‚ä• : cont-fun ‚Ñï‚ä• ‚Ñï‚ä•
s : ‚Ñï ‚Üí A (pos ‚Ñï‚ä•)
s x = inj (suc x)
s‚ä• = extend-function s

z‚ä• : cont-fun ‚Ñï‚ä• ùîπ‚ä•
z : ‚Ñï ‚Üí A (pos ùîπ‚ä•)
z zero = inj true
z (suc n) = inj false
z‚ä• = extend-function z

p‚ä• : cont-fun ‚Ñï‚ä• ‚Ñï‚ä•
p : ‚Ñï ‚Üí A (pos ‚Ñï‚ä•)
p zero = inj zero
p (suc n) = inj n
p‚ä• = extend-function p

p‚ä•-inv-s‚ä• : {x : B‚ä• ‚Ñï} ‚Üí g (mon p‚ä•) ((g (mon s‚ä•)) x) ‚â° x
p‚ä•-inv-s‚ä• {‚ä•‚ÇÅ} = refl
p‚ä•-inv-s‚ä• {inj zero} = refl
p‚ä•-inv-s‚ä• {inj (suc x)} = refl

constant-fun : ‚àÄ {Œì} ‚Üí (B : Set) ‚Üí B ‚Üí cont-fun context-‚ü¶ Œì ‚üß (flat-domain B)
constant-fun B b = constant-fun-is-cont b

project-x‚Ä≤ : ‚àÄ {x} ‚Üí (Œì : Context) ‚Üí (Œì‚àãx : Œì ‚àã x) ‚Üí cont-fun
                                                (domain-dependent-product (Fin (length Œì))
                                                  (Œª x ‚Üí ‚ü¶ lookup‚ÇÇ {Œì} x ‚üß))
                                                ‚ü¶ lookup‚ÇÇ (conv Œì‚àãx) ‚üß
project-x‚Ä≤ {x} Œì Œì‚àãx =  domain-dependent-projection (Fin (length Œì)) (Œª x ‚Üí ‚ü¶ lookup‚ÇÇ x ‚üß) (conv Œì‚àãx)

project-x-lemma : ‚àÄ {x} ‚Üí {Œì : Context} ‚Üí (Œì‚àãx : Œì ‚àã x) ‚Üí lookup‚ÇÇ (conv Œì‚àãx) ‚â° x
project-x-lemma Z = refl
project-x-lemma (S Œì‚àãx) = project-x-lemma Œì‚àãx

project-x : ‚àÄ {x} ‚Üí (Œì : Context) ‚Üí (Œì‚àãx : Œì ‚àã x) ‚Üí cont-fun
                                                (domain-dependent-product (Fin (length Œì))
                                                  (Œª x ‚Üí ‚ü¶ lookup‚ÇÇ {Œì} x ‚üß))
                                                ‚ü¶ x ‚üß
project-x Œì Œì‚àãx rewrite Eq.sym (project-x-lemma Œì‚àãx) = project-x‚Ä≤ Œì Œì‚àãx


‚ü¶_‚ä¢‚Ä≤_‚üß : ‚àÄ {A} ‚Üí (Œì : Context) ‚Üí (M : Œì ‚ä¢ A) ‚Üí cont-fun context-‚ü¶ Œì ‚üß ‚ü¶ A ‚üß
‚ü¶ Œì ‚ä¢‚Ä≤ `zero ‚üß = constant-fun {Œì} ‚Ñï 0
‚ü¶ Œì ‚ä¢‚Ä≤ `true ‚üß = constant-fun {Œì} Bool true
‚ü¶ Œì ‚ä¢‚Ä≤ `false ‚üß = constant-fun {Œì} Bool false
‚ü¶ Œì ‚ä¢‚Ä≤ M‚ÇÅ ¬∑ M‚ÇÇ ‚üß = ev-cont ‚àò (pair-f ‚ü¶ Œì ‚ä¢‚Ä≤ M‚ÇÅ ‚üß ‚ü¶ Œì ‚ä¢‚Ä≤ M‚ÇÇ ‚üß) 
‚ü¶ Œì ‚ä¢‚Ä≤ `is-zero N ‚üß = z‚ä• ‚àò ‚ü¶ Œì ‚ä¢‚Ä≤ N ‚üß
‚ü¶ Œì ‚ä¢‚Ä≤ `suc N ‚üß = s‚ä• ‚àò ‚ü¶ Œì ‚ä¢‚Ä≤ N ‚üß
‚ü¶ Œì ‚ä¢‚Ä≤ `pred N ‚üß = p‚ä• ‚àò ‚ü¶ Œì ‚ä¢‚Ä≤ N ‚üß
‚ü¶ Œì ‚ä¢‚Ä≤ if M‚ÇÅ then M‚ÇÇ else M‚ÇÉ ‚üß = if-cont ‚àò (pair-f ‚ü¶ Œì ‚ä¢‚Ä≤ M‚ÇÅ ‚üß (pair-f ‚ü¶ Œì ‚ä¢‚Ä≤ M‚ÇÇ ‚üß ‚ü¶ Œì ‚ä¢‚Ä≤ M‚ÇÉ ‚üß))
‚ü¶ Œì ‚ä¢‚Ä≤ ` x ‚üß = project-x Œì x
‚ü¶ Œì ‚ä¢‚Ä≤ ∆õ_ {A = A} {B} M ‚üß = cur-cont (helpful-lemma-blah {Œì} {A} {B} ‚ü¶ Œì , A ‚ä¢‚Ä≤ M ‚üß)
‚ü¶ Œì ‚ä¢‚Ä≤ Œº M ‚üß = tarski-continuous ‚àò ‚ü¶ Œì ‚ä¢‚Ä≤ M ‚üß 

‚ü¶_‚üß-program : ‚àÄ {T} ‚Üí (M : ‚àÖ ‚ä¢ T) ‚Üí A (pos ‚ü¶ T ‚üß)
‚ü¶_‚üß-program M = g (mon ‚ü¶ ‚àÖ ‚ä¢‚Ä≤ M ‚üß) Œª() 

zero-right : ‚ü¶ `zero ‚üß-program ‚â° (inj zero)
zero-right = refl


--‚ü¶ Œº (∆õ (`suc (# fzero))) ‚üß-program ‚â° ‚ä•‚ÇÅ
--‚ü¶ Œº (∆õ (`pred (# fzero))) ‚üß-program ‚â° inj zero
--g (mon (‚ü¶ Œº (∆õ_ {A = `‚Ñï ‚áí `‚Ñï } (∆õ_  {A = `‚Ñï} (if (`is-zero (# fzero)) then (`suc `zero) else (# (fsucc fzero) ¬∑ (`pred (# fzero)))))) ‚üß-program))


{-# OPTIONS --allow-unsolved-metas #-} 
module useful-functions where

import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; cong; refl)
open Eq.‚â°-Reasoning
open import Data.Nat using (‚Ñï)
open import Data.Bool using (Bool; true; false)
open import posets2 using (poset; domain; monotone-fun; cont-fun; flat-domain; inj; x‚âºx; chain-map; chain-complete-flat-domain-pos-B; domain-product; product-equality; ‚ä•‚ÇÅ; z‚âºn; function-domain; chain; product-pos; domain-dependent-product)
open import Data.Product renaming (_,_ to ‚ü®_,_‚ü©)

constant-fun-is-cont : ‚àÄ {B : Set} ‚Üí {D : domain} ‚Üí B ‚Üí cont-fun D (flat-domain B)
constant-fun-is-cont-mon : ‚àÄ {B : Set} ‚Üí {D : domain} ‚Üí B ‚Üí monotone-fun (domain.pos D) (domain.pos (flat-domain B))
constant-fun-is-cont-mon {B} {D} b = record { g = Œª x ‚Üí inj b
                                            ; mon = Œª x ‚Üí x‚âºx
                                            }
constant-fun-is-cont {B} {D} b = record { mon = constant-fun-is-cont-mon {B} {D} b
                                        ; lub-preserve = Œª c ‚Üí poset.antisymmetric (domain.pos (flat-domain B))
                                            (posets2.lub.lub1
                                              {domain.pos (flat-domain B)}
                                              {chain-map c (constant-fun-is-cont-mon {B} {D} b)}
                                              (chain-complete-flat-domain-pos-B (chain-map c (constant-fun-is-cont-mon {B} {D} b)))
                                              {0}
                                            )
                                            (posets2.lub.lub2
                                              {domain.pos (flat-domain B)}
                                              {chain-map c (constant-fun-is-cont-mon {B} {D} b)}
                                              (chain-complete-flat-domain-pos-B (chain-map c (constant-fun-is-cont-mon {B} {D} b)))
                                              {inj b}
                                              (Œª {n} ‚Üí x‚âºx)
                                            )
                                        }

pair-f : ‚àÄ {D D‚ÇÅ D‚ÇÇ : domain} ‚Üí cont-fun D D‚ÇÅ ‚Üí cont-fun D D‚ÇÇ ‚Üí cont-fun D (domain-product D‚ÇÅ D‚ÇÇ)
pair-f f‚ÇÅ f‚ÇÇ = record { mon = record { g = Œª d ‚Üí ‚ü® monotone-fun.g (cont-fun.mon f‚ÇÅ) d , monotone-fun.g (cont-fun.mon f‚ÇÇ) d ‚ü©
                                     ; mon = Œª a‚â§a‚Ä≤ ‚Üí ‚ü® monotone-fun.mon (cont-fun.mon f‚ÇÅ) a‚â§a‚Ä≤ , monotone-fun.mon (cont-fun.mon f‚ÇÇ) a‚â§a‚Ä≤ ‚ü©
                                     }
                      ; lub-preserve = Œª c ‚Üí product-equality ((cont-fun.lub-preserve f‚ÇÅ) c) ((cont-fun.lub-preserve f‚ÇÇ) c)
                      }

_‚àò_ : ‚àÄ {D‚ÇÅ D‚ÇÇ D‚ÇÉ} ‚Üí cont-fun D‚ÇÇ D‚ÇÉ ‚Üí cont-fun D‚ÇÅ D‚ÇÇ ‚Üí cont-fun D‚ÇÅ D‚ÇÉ

‚àò-mon : ‚àÄ {D‚ÇÅ D‚ÇÇ D‚ÇÉ} ‚Üí cont-fun D‚ÇÇ D‚ÇÉ ‚Üí cont-fun D‚ÇÅ D‚ÇÇ ‚Üí monotone-fun (domain.pos D‚ÇÅ) (domain.pos D‚ÇÉ)
‚àò-mon g f = record { g = Œª x ‚Üí monotone-fun.g (cont-fun.mon g) (monotone-fun.g (cont-fun.mon f) x)
                   ; mon = Œª a‚â§a‚Ä≤ ‚Üí monotone-fun.mon (cont-fun.mon g) (monotone-fun.mon (cont-fun.mon f) a‚â§a‚Ä≤)
                   }


_‚àò_ {D‚ÇÅ = D‚ÇÅ} {D‚ÇÇ = D‚ÇÇ} {D‚ÇÉ = D‚ÇÉ} g f  =
                     record { mon = ‚àò-mon g f
                            ; lub-preserve = Œª c ‚Üí
                            begin
                              monotone-fun.g (cont-fun.mon g)
                                (monotone-fun.g (cont-fun.mon f)
                                  (posets2.lub.‚äî (domain.chain-complete D‚ÇÅ c)))
                            ‚â°‚ü® cong (monotone-fun.g (cont-fun.mon g)) (cont-fun.lub-preserve f c) ‚ü©
                              monotone-fun.g (cont-fun.mon g)
                                (posets2.lub.‚äî
                                 (domain.chain-complete D‚ÇÇ (chain-map c (cont-fun.mon f))))
                            ‚â°‚ü® cont-fun.lub-preserve g (chain-map c (cont-fun.mon f)) ‚ü©
                              posets2.lub.‚äî (domain.chain-complete D‚ÇÉ (chain-map c (‚àò-mon g f)))
                            ‚àé 
                            }

extend-function : ‚àÄ {X Y} ‚Üí (X ‚Üí posets2.B‚ä• Y) ‚Üí cont-fun (flat-domain X) (flat-domain Y)
extend-function-mon : ‚àÄ {X Y} ‚Üí (X ‚Üí posets2.B‚ä• Y) ‚Üí monotone-fun (posets2.flat-domain-pos X) (posets2.flat-domain-pos Y)
extend-function-mon f = record { g = Œª { ‚ä•‚ÇÅ ‚Üí ‚ä•‚ÇÅ
                                       ; (inj x) ‚Üí f x
                                       }
                               ; mon = Œª {z‚âºn ‚Üí z‚âºn; x‚âºx ‚Üí x‚âºx}
                               }

extend-function {X} {Y} f = record { mon = extend-function-mon f
                           ; lub-preserve = Œª c ‚Üí poset.antisymmetric (posets2.flat-domain-pos Y)
                               {!!}
                               (posets2.lub.lub2
                                  (chain-complete-flat-domain-pos-B
                                   (chain-map c (extend-function-mon f)))
                                  Œª {n} ‚Üí monotone-fun.mon (extend-function-mon f) (posets2.lub.lub1 (domain.chain-complete (flat-domain X) c)))
                           }

‚Ñï‚ä• : domain
ùîπ‚ä• : domain

‚Ñï‚ä• = flat-domain ‚Ñï
ùîπ‚ä• = flat-domain Bool


if-cont : ‚àÄ {D} ‚Üí cont-fun (domain-product ùîπ‚ä• (domain-product D D)) D
if-mon : ‚àÄ {D} ‚Üí monotone-fun (posets2.product-pos ùîπ‚ä• (domain-product D D)) (domain.pos D)

domain-dependent-projection : (I : Set) ‚Üí (f : I ‚Üí domain) ‚Üí (i : I) ‚Üí cont-fun (domain-dependent-product I f) (f i)

domain-dependent-projection I f i = record { mon = record { g = Œª p ‚Üí p i
                                                          ; mon = Œª a‚â§a‚Ä≤ ‚Üí a‚â§a‚Ä≤ i
                                                          }
                                           ; lub-preserve = {!!}
                                           }

if-mon {D} = record { g = (Œª { ‚ü® inj true , ‚ü® d , _ ‚ü© ‚ü© ‚Üí d
                             ; ‚ü® inj false , ‚ü® _ , d‚Ä≤ ‚ü© ‚ü© ‚Üí d‚Ä≤
                             ; ‚ü® ‚ä•‚ÇÅ , ‚ü® _ , _ ‚ü© ‚ü© ‚Üí posets2.least-element.‚ä• (domain.bottom D)
                             })
                    ; mon = Œª { {‚ü® ‚ä•‚ÇÅ , b‚ÇÅ ‚ü©} ‚Üí Œª a‚â§a‚Ä≤ ‚Üí (posets2.least-element.‚ä•-is-bottom (domain.bottom D))
                              ; {‚ü® inj true , _ ‚ü©} {‚ü® inj true , _ ‚ü©} ‚Üí Œª a‚â§a‚Ä≤ ‚Üí proj‚ÇÅ (proj‚ÇÇ a‚â§a‚Ä≤)
                              ; {‚ü® inj false , _ ‚ü©} {‚ü® inj false , _ ‚ü©} ‚Üí Œª a‚â§a‚Ä≤ ‚Üí proj‚ÇÇ (proj‚ÇÇ a‚â§a‚Ä≤)
                              }
                    }



slide-33-prop : ‚àÄ {D E F}
  ‚Üí (f : (poset.A (domain.pos D)) √ó (poset.A (domain.pos E)) ‚Üí poset.A (domain.pos F))
  ‚Üí ({d d‚Ä≤ : poset.A (domain.pos D)} ‚Üí {e : poset.A (domain.pos E)} ‚Üí (poset.R (domain.pos D)) d d‚Ä≤ ‚Üí (poset.R (domain.pos F)) (f ‚ü® d , e ‚ü© ) (f ‚ü® d‚Ä≤ , e ‚ü©))
  ‚Üí ({d : poset.A (domain.pos D)} ‚Üí {e e‚Ä≤ : poset.A (domain.pos E)} ‚Üí (poset.R (domain.pos E)) e e‚Ä≤ ‚Üí (poset.R (domain.pos F)) (f ‚ü® d , e ‚ü© ) (f ‚ü® d , e‚Ä≤ ‚ü©))
  ‚Üí monotone-fun (domain.pos (domain-product D E)) (domain.pos F)
slide-33-prop {D} {E} {F} f mon-arg-1 mon-arg-2 = record { g = f
                                                         ; mon = Œª { {a} {b} ‚ü® m‚â§m‚Ä≤ , n‚â§n‚Ä≤ ‚ü© ‚Üí poset.transitive (domain.pos F) (mon-arg-1 m‚â§m‚Ä≤) (mon-arg-2 n‚â§n‚Ä≤)}
                                                         }

chain-fix-d-slide-33 : ‚àÄ {D E}
  ‚Üí chain (product-pos D E)
  ‚Üí poset.A (domain.pos D)
  ‚Üí chain (product-pos D E)


chain-fix-d-slide-33 {D} {E} c d = record { monotone = record { g = Œª n ‚Üí ‚ü® d , monotone-fun.g (chain.monotone (posets2.proj‚ÇÇ-chain {D} {E} c)) n ‚ü©
                                                              ; mon = Œª a‚â§a‚Ä≤ ‚Üí ‚ü® poset.reflexive (domain.pos D) , proj‚ÇÇ (monotone-fun.mon (chain.monotone c) a‚â§a‚Ä≤) ‚ü©
                                                              }
                                          }

chain-fix-e-slide-33 : ‚àÄ {D E}
  ‚Üí chain (product-pos D E)
  ‚Üí poset.A (domain.pos E)
  ‚Üí chain (product-pos D E)


chain-fix-e-slide-33 {D} {E} c e = record { monotone = record { g = Œª n ‚Üí ‚ü® monotone-fun.g (chain.monotone (posets2.proj‚ÇÅ-chain {D} {E} c)) n , e ‚ü©
                                                              ; mon = Œª a‚â§a‚Ä≤ ‚Üí ‚ü® proj‚ÇÅ (monotone-fun.mon (chain.monotone c) a‚â§a‚Ä≤) , poset.reflexive (domain.pos E) ‚ü©
                                                              }
                                          }


slide-33-prop-cont : ‚àÄ {D E F}
  ‚Üí (f : (poset.A (domain.pos D)) √ó (poset.A (domain.pos E)) ‚Üí poset.A (domain.pos F))
  ‚Üí (mon-arg-1 : {d d‚Ä≤ : poset.A (domain.pos D)} ‚Üí {e : poset.A (domain.pos E)} ‚Üí (poset.R (domain.pos D)) d d‚Ä≤ ‚Üí (poset.R (domain.pos F)) (f ‚ü® d , e ‚ü© ) (f ‚ü® d‚Ä≤ , e ‚ü©))
  ‚Üí (mon-arg-2 : {d : poset.A (domain.pos D)} ‚Üí {e e‚Ä≤ : poset.A (domain.pos E)} ‚Üí (poset.R (domain.pos E)) e e‚Ä≤ ‚Üí (poset.R (domain.pos F)) (f ‚ü® d , e ‚ü© ) (f ‚ü® d , e‚Ä≤ ‚ü©))
  ‚Üí ({c : chain (product-pos D E)} ‚Üí {e : poset.A (domain.pos E)} ‚Üí f ‚ü® posets2.lub.‚äî (domain.chain-complete D (posets2.proj‚ÇÅ-chain {D} {E} c)) , e ‚ü© ‚â° posets2.lub.‚äî (domain.chain-complete F (chain-map (chain-fix-e-slide-33 {D} {E} c e) (slide-33-prop {D} {E} {F} f mon-arg-1 mon-arg-2) )))
  ‚Üí ({c : chain (product-pos D E)} ‚Üí {d : poset.A (domain.pos D)} ‚Üí f ‚ü® d , posets2.lub.‚äî (domain.chain-complete E (posets2.proj‚ÇÇ-chain {D} {E} c)) ‚ü© ‚â° posets2.lub.‚äî (domain.chain-complete F (chain-map (chain-fix-d-slide-33 {D} {E} c d) (slide-33-prop {D} {E} {F} f mon-arg-1 mon-arg-2) )))
  ‚Üí cont-fun (domain-product D E) F



slide-33-prop-cont {D} {E} {F} f mon-arg-1 mon-arg-2 cont-arg-1 cont-arg-2  = record
  { mon = slide-33-prop {D} {E} {F} f mon-arg-1 mon-arg-2
  ; lub-preserve = Œª c ‚Üí begin
                           monotone-fun.g
                             (slide-33-prop {D} {E} {F} f mon-arg-1 mon-arg-2)
                             (posets2.lub.‚äî (domain.chain-complete (domain-product D E) c))
                         ‚â°‚ü® cont-arg-1 {chain-fix-e-slide-33 {D} {E} c (posets2.lub.‚äî (domain.chain-complete E (posets2.proj‚ÇÇ-chain {D} {E} c)))} ‚ü©
                           posets2.lub.‚äî (domain.chain-complete F (
                             chain-map
                               (chain-fix-e-slide-33 {D} {E} c (posets2.lub.‚äî (domain.chain-complete E (posets2.proj‚ÇÇ-chain {D} {E} c))))
                               (slide-33-prop {D} {E} {F} f mon-arg-1 mon-arg-2)
                           ))
                         ‚â°‚ü® posets2.same-f-same-lub F
                              (chain-map
                                (chain-fix-e-slide-33 {D} {E} c (posets2.lub.‚äî (domain.chain-complete E (posets2.proj‚ÇÇ-chain {D} {E} c))))
                                (slide-33-prop {D} {E} {F} f mon-arg-1 mon-arg-2))
                              {!!}
                              (posets2.function-extensionality Œª n ‚Üí
                                cont-arg-2 {{!!}} {proj‚ÇÅ (monotone-fun.g (chain.monotone c) n)})
                          ‚ü©
                           {!posets2.lub.‚äî (domain.chain-complete F (
                             posets2.!}
                         ‚â°‚ü® {!!} ‚ü©
                           {!!}
                         ‚â°‚ü® {!!} ‚ü©
                           {!!}
                         ‚â°‚ü® {!!} ‚ü©
                           posets2.lub.‚äî
                             (domain.chain-complete F
                              (chain-map c
                               (slide-33-prop {D} {E} {F} f mon-arg-1 mon-arg-2))) 
                         ‚àé
  }

if-g : ‚àÄ {D} ‚Üí poset.A (posets2.product-pos ùîπ‚ä• (domain-product D D)) ‚Üí poset.A (domain.pos D)
if-g {D} ‚ü® ‚ä•‚ÇÅ , _ ‚ü© = posets2.least-element.‚ä• (domain.bottom D)
if-g ‚ü® inj false , ‚ü® _ , d‚Ä≤ ‚ü© ‚ü© = d‚Ä≤
if-g ‚ü® inj true , ‚ü® d , _ ‚ü© ‚ü© = d

if-mon-first : ‚àÄ {D} ‚Üí ‚àÄ {b b‚Ä≤} ‚Üí ‚àÄ {e} ‚Üí (poset.R (domain.pos ùîπ‚ä•)) b b‚Ä≤ ‚Üí (poset.R (domain.pos D)) (if-g {D} ‚ü® b , e ‚ü© ) (if-g {D} ‚ü® b‚Ä≤ , e ‚ü©)
if-mon-first {D} z‚âºn = posets2.least-element.‚ä•-is-bottom (domain.bottom D)
if-mon-first {D} x‚âºx = poset.reflexive (domain.pos D)

if-mon-second : ‚àÄ {D} ‚Üí ({b : posets2.B‚ä• Bool} ‚Üí {e e‚Ä≤ : poset.A (domain.pos (domain-product D D))} ‚Üí (poset.R (domain.pos (domain-product D D))) e e‚Ä≤ ‚Üí (poset.R (domain.pos D)) (if-g {D} ‚ü® b , e ‚ü© ) (if-g {D} ‚ü® b , e‚Ä≤ ‚ü©))
if-mon-second {D} {b = ‚ä•‚ÇÅ} x = posets2.least-element.‚ä•-is-bottom (domain.bottom D)
if-mon-second {b = inj false} ‚ü® _ , n‚â§n‚Ä≤ ‚ü© = n‚â§n‚Ä≤
if-mon-second {b = inj true} ‚ü® m‚â§m‚Ä≤ , _ ‚ü© = m‚â§m‚Ä≤

--if-cont-first : ‚àÄ {D} ‚Üí ({c : chain (product-pos ùîπ‚ä• (domain-product D D))} ‚Üí {e : poset.A (domain.pos (domain-product D D))} ‚Üí if-g ‚ü® posets2.lub.‚äî (domain.chain-complete ùîπ‚ä• (posets2.proj‚ÇÅ-chain c)) , e ‚ü© ‚â° posets2.lub.‚äî (domain.chain-complete (domain-product ùîπ‚ä• (domain-product D D)) (chain-map (chain-fix-e-slide-33 c e) (slide-33-prop if-g if-mon-first if-mon-second) )))

--if-cont-second : ‚àÄ {D} ‚Üí ({c : chain (product-pos ùîπ‚ä• (domain-product D D))} ‚Üí {d : poset.A (domain.pos ùîπ‚ä•)} ‚Üí if-g ‚ü® d , posets2.lub.‚äî (domain.chain-complete (domain-product D D) (posets2.proj‚ÇÇ-chain c)) ‚ü© ‚â° posets2.lub.‚äî (domain.chain-complete (domain-product ùîπ‚ä• (domain-product D D)) (chain-map (chain-fix-d-slide-33 c d) (slide-33-prop if-g if-mon-first if-mon-second) )))


if-cont {D} = slide-33-prop-cont {ùîπ‚ä•} {domain-product D D} {D} (if-g {D}) (if-mon-first {D}) {!!} {!!} {!!}


cur-cont : ‚àÄ {D D‚Ä≤ E} ‚Üí cont-fun (domain-product D‚Ä≤ D) E ‚Üí cont-fun D‚Ä≤ (function-domain D E)

cur-mon : ‚àÄ {D D‚Ä≤ E} ‚Üí cont-fun (domain-product D‚Ä≤ D) E ‚Üí monotone-fun (domain.pos D‚Ä≤) (domain.pos (function-domain D E))
cur-mon {D} {D‚Ä≤} {E} f =
  record { g = Œª d‚Ä≤ ‚Üí
    record { mon =
      record { g = Œª d ‚Üí monotone-fun.g (cont-fun.mon f) ‚ü® d‚Ä≤ , d ‚ü©
             ; mon = Œª a‚â§a‚Ä≤ ‚Üí monotone-fun.mon (cont-fun.mon f) ‚ü® (poset.reflexive (domain.pos D‚Ä≤)) , a‚â§a‚Ä≤ ‚ü©
             }
           ; lub-preserve = Œª c ‚Üí {!!}
           }
         ; mon = Œª a‚â§a‚Ä≤ ‚Üí Œª {d} ‚Üí monotone-fun.mon (cont-fun.mon f) ‚ü® a‚â§a‚Ä≤ , poset.reflexive (domain.pos D) ‚ü©
         }
         
cur-cont {D} {D‚Ä≤} {E} f = record { mon = cur-mon {D} {D‚Ä≤} {E} f
                                 ; lub-preserve = Œª c ‚Üí {!!}
                                 }


ev-cont : ‚àÄ {D E} ‚Üí cont-fun (domain-product (function-domain D E) D) E
ev-mon : ‚àÄ {D E} ‚Üí monotone-fun (posets2.product-pos (function-domain D E) D) (domain.pos E)
ev-mon {D} {E} = record { g = Œª {‚ü® f , d ‚ü© ‚Üí monotone-fun.g (cont-fun.mon f) d}
                        ; mon = Œª { {‚ü® f , d ‚ü©} {‚ü® f‚Ä≤ , d‚Ä≤ ‚ü©} ‚ü® f‚â§f‚Ä≤ , d‚â§d‚Ä≤ ‚ü© ‚Üí
                          poset.transitive (domain.pos E)
                            (monotone-fun.mon (cont-fun.mon f) d‚â§d‚Ä≤)
                            (f‚â§f‚Ä≤ {d‚Ä≤}) }
                        }
ev-lub-preserve : ‚àÄ {D E}
  ‚Üí (c : chain (posets2.product-pos (function-domain D E) D))
  ‚Üí (monotone-fun.g ev-mon)
    ‚ü®
      posets2.function-domain-‚äî D E (posets2.proj‚ÇÅ-chain {function-domain D E} {D} c)
    ,
      posets2.lub.‚äî (domain.chain-complete D (posets2.proj‚ÇÇ-chain {function-domain D E} {D} c))
    ‚ü©
    ‚â° posets2.lub.‚äî (domain.chain-complete E (chain-map c ev-mon))

f‚Çô,d‚Çô‚Üíf‚Çô[d‚Çô] : ‚àÄ {D} {E} ‚Üí (c : chain (posets2.product-pos (function-domain D E) D)) ‚Üí chain (domain.pos E)
f‚Çô,d‚Çô‚Üíf‚Çô[d‚Çô] c = chain-map c ev-mon

f‚Çô,d‚Çô‚Üíf‚Çô[‚äîd‚Çô] : ‚àÄ {D} {E} ‚Üí (c : chain (posets2.product-pos (function-domain D E) D)) ‚Üí chain (domain.pos E)
f‚Çô,d‚Çô‚Üíf‚Çô[‚äîd‚Çô] {D} {E} c =
  let D‚ÜíE = function-domain D E in
  let f = monotone-fun.g (chain.monotone (posets2.proj‚ÇÅ-chain {D‚ÜíE} {D} c)) in
  let ‚äîd‚Çô = (posets2.lub.‚äî (domain.chain-complete D (posets2.proj‚ÇÇ-chain {D‚ÜíE} {D} c))) in
  record
  { monotone =
    record { g = Œª n ‚Üí monotone-fun.g (cont-fun.mon (f n)) ‚äîd‚Çô
           ; mon = Œª a‚â§a‚Ä≤ ‚Üí monotone-fun.mon (chain.monotone (posets2.proj‚ÇÅ-chain {D‚ÜíE} {D} c)) a‚â§a‚Ä≤
           }
  }

f‚Çô,d‚Çô‚Üí‚äî‚±ºf·µ¢d‚±º :  ‚àÄ {D} {E} ‚Üí (c : chain (posets2.product-pos (function-domain D E) D)) ‚Üí chain (domain.pos E)

f‚Çô,d‚Çô‚Üí‚äî‚±ºf·µ¢d‚±º {D}{E} c =
  let D‚ÜíE = function-domain D E in
  record
  { monotone =
    record { g = Œª i ‚Üí posets2.lub.‚äî ((domain.chain-complete E) (chain-map (posets2.proj‚ÇÇ-chain {D‚ÜíE} {D} c) (cont-fun.mon (monotone-fun.g (chain.monotone (posets2.proj‚ÇÅ-chain {D‚ÜíE} {D} c)) i))))
           ; mon = Œª {a} {a‚Ä≤} a‚â§a‚Ä≤ ‚Üí
             posets2.same-f-same-lub-‚â§ E
               (chain-map (posets2.proj‚ÇÇ-chain {D‚ÜíE} {D} c) (cont-fun.mon (monotone-fun.g (chain.monotone (posets2.proj‚ÇÅ-chain {D‚ÜíE} {D} c)) a))) (chain-map (posets2.proj‚ÇÇ-chain {D‚ÜíE} {D} c)
                                                                                                                            (cont-fun.mon
                                                                                                                             (monotone-fun.g (chain.monotone (posets2.proj‚ÇÅ-chain {D‚ÜíE} {D} c)) a‚Ä≤)))
               Œª n ‚Üí
                 monotone-fun.mon (chain.monotone (posets2.proj‚ÇÅ-chain {D‚ÜíE} {D} c)) a‚â§a‚Ä≤ {monotone-fun.g (chain.monotone (posets2.proj‚ÇÇ-chain {D‚ÜíE} {D} c)) n}
           }
  }

double-index-fun : ‚àÄ {D} {E} ‚Üí (c : chain (posets2.product-pos (function-domain D E) D)) ‚Üí monotone-fun posets2.nats¬≤-pos (domain.pos E)
double-index-g : ‚àÄ {D} {E} ‚Üí (c : chain (posets2.product-pos (function-domain D E) D)) ‚Üí ‚Ñï √ó ‚Ñï ‚Üí poset.A (domain.pos E) 
double-index-g {D} {E} c ‚ü® m , n ‚ü© =
  let D‚ÜíE = function-domain D E in
  monotone-fun.g (cont-fun.mon (monotone-fun.g (chain.monotone (posets2.proj‚ÇÅ-chain {D‚ÜíE} {D} c)) m)) (monotone-fun.g (chain.monotone (posets2.proj‚ÇÇ-chain {D‚ÜíE} {D} c))n)   

double-index-fun {D} {E} c =
  let D‚ÜíE = function-domain D E in
  record
    { g = double-index-g c 
    ; mon = Œª { {‚ü® m , n ‚ü©} {‚ü® m‚Ä≤ , n‚Ä≤ ‚ü©} ‚ü® m‚â§m‚Ä≤ , n‚â§n‚Ä≤ ‚ü© ‚Üí
                poset.transitive (domain.pos E)
                  ((monotone-fun.mon (chain.monotone (posets2.proj‚ÇÅ-chain {D‚ÜíE} {D} c)) m‚â§m‚Ä≤ {monotone-fun.g (chain.monotone (posets2.proj‚ÇÇ-chain {D‚ÜíE} {D} c)) n}))
                  ((monotone-fun.mon (cont-fun.mon (monotone-fun.g (chain.monotone (posets2.proj‚ÇÅ-chain {D‚ÜíE} {D} c)) m‚Ä≤)) (monotone-fun.mon (chain.monotone (posets2.proj‚ÇÇ-chain {D‚ÜíE} {D} c)) n‚â§n‚Ä≤)))
              }
    }

ev-lub-preserve {D} {E} c =
  let ev = monotone-fun.g ev-mon in
  let D‚ÜíE = function-domain D E in
  let f‚Çô-chain = (posets2.proj‚ÇÅ-chain {D‚ÜíE} {D} c) in
  let ‚äîf‚Çô = posets2.function-domain-‚äî D E (posets2.proj‚ÇÅ-chain {D‚ÜíE} {D} c) in
  let ‚äîd‚Çô = posets2.lub.‚äî (domain.chain-complete D (posets2.proj‚ÇÇ-chain {D‚ÜíE} {D} c)) in
  let ev[‚äîf‚Çô,‚äîd‚Çô] = ev ‚ü® ‚äîf‚Çô , ‚äîd‚Çô ‚ü© in
  let [‚äîf‚Çô][‚äîd‚Çô] = monotone-fun.g (cont-fun.mon ‚äîf‚Çô) ‚äîd‚Çô in
  let ‚äî[f‚Çô[‚äîd‚Çô]] = posets2.lub.‚äî (domain.chain-complete E (f‚Çô,d‚Çô‚Üíf‚Çô[‚äîd‚Çô] c)) in
  let ‚äî‚äîf·µ¢d‚±º = posets2.lub.‚äî (domain.chain-complete E (f‚Çô,d‚Çô‚Üí‚äî‚±ºf·µ¢d‚±º c)) in
  let ‚äîf‚Çôd‚Çô = posets2.lub.‚äî (domain.chain-complete E (f‚Çô,d‚Çô‚Üíf‚Çô[d‚Çô] c)) in
  let ‚äîev[f‚Çô,d‚Çô] = posets2.lub.‚äî (domain.chain-complete E (chain-map c ev-mon)) in
  begin
    ev[‚äîf‚Çô,‚äîd‚Çô]
  ‚â°‚ü® refl ‚ü©
    [‚äîf‚Çô][‚äîd‚Çô]
  ‚â°‚ü® posets2.same-f-same-lub E
      (posets2.chain-of-f‚Çô[d] D E (posets2.proj‚ÇÅ-chain {D‚ÜíE} {D} c)
        (posets2.lub.‚äî (domain.chain-complete D (posets2.proj‚ÇÇ-chain {D‚ÜíE} {D} c))))
      (f‚Çô,d‚Çô‚Üíf‚Çô[‚äîd‚Çô] c)
      refl
   ‚ü©
    ‚äî[f‚Çô[‚äîd‚Çô]]
  ‚â°‚ü® posets2.same-f-same-lub E
    (f‚Çô,d‚Çô‚Üíf‚Çô[‚äîd‚Çô] c)
    (f‚Çô,d‚Çô‚Üí‚äî‚±ºf·µ¢d‚±º c)
    (posets2.function-extensionality
      Œª n ‚Üí cont-fun.lub-preserve (monotone-fun.g (chain.monotone f‚Çô-chain) n) (posets2.proj‚ÇÇ-chain {D‚ÜíE} {D} c))
   ‚ü©
    ‚äî‚äîf·µ¢d‚±º
  ‚â°‚ü® posets2.same-f-same-lub E
      (f‚Çô,d‚Çô‚Üí‚äî‚±ºf·µ¢d‚±º c)
      (posets2.chain-‚äîf‚Çñ‚Çô-with-n-fixed E (double-index-fun c))
      (posets2.function-extensionality
        Œª n ‚Üí posets2.same-f-same-lub E
              (chain-map (posets2.proj‚ÇÇ-chain {D‚ÜíE} {D} c) (cont-fun.mon (monotone-fun.g (chain.monotone (posets2.proj‚ÇÅ-chain {D‚ÜíE} {D} c)) n)))
              (posets2.chain-f‚Çò‚Çô-with-n-fixed E (double-index-fun c) n)
              (posets2.function-extensionality Œª m ‚Üí {!!}))
   ‚ü©
    posets2.lub.‚äî (domain.chain-complete E (posets2.chain-‚äîf‚Çñ‚Çô-with-n-fixed E (double-index-fun c)))
  ‚â°‚ü® posets2.diagonalising-lemma-2 E (double-index-fun c) ‚ü©
    posets2.lub.‚äî (domain.chain-complete E (posets2.f‚Çñ‚Çñ-chain E (double-index-fun c)))
  ‚â°‚ü® posets2.same-f-same-lub E
    (posets2.f‚Çñ‚Çñ-chain E (double-index-fun c))
    (f‚Çô,d‚Çô‚Üíf‚Çô[d‚Çô] c)
    (posets2.function-extensionality
      Œª n ‚Üí refl)
   ‚ü© 
    ‚äîf‚Çôd‚Çô
  ‚â°‚ü® refl ‚ü©
    ‚äîev[f‚Çô,d‚Çô]
  ‚àé

--mon (ev-cont {D} {E}) = ?

ev-cont {D} {E} = record { mon = ev-mon
                         ; lub-preserve = ev-lub-preserve
                         }

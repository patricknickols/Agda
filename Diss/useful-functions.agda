
{-# OPTIONS --allow-unsolved-metas #-}
module useful-functions where

import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; cong; refl)
open Eq.‚â°-Reasoning
open import Data.Nat using (‚Ñï)
open import Data.Bool using (Bool; true; false)
open import posets2 using (poset; lub; domain; monotone-fun; cont-fun; flat-domain; flat-domain-pos; inj; x‚âºx; chain-map; chain-complete-flat-domain-pos-B; domain-product; product-equality; ‚ä•‚ÇÅ; z‚âºn; function-domain; chain; product-pos; domain-dependent-product; fsucc; fzero; proj‚ÇÅ-chain; proj‚ÇÇ-chain; same-f-same-lub)
open import Data.Product renaming (_,_ to ‚ü®_,_‚ü©)

open poset
open domain
open monotone-fun
open cont-fun
open lub
open chain


constant-fun-is-cont : {B : Set} ‚Üí {D : domain} ‚Üí B ‚Üí cont-fun D (flat-domain B)
constant-fun-is-cont-mon : {B : Set} ‚Üí {D : domain} ‚Üí B ‚Üí monotone-fun (pos D) (pos (flat-domain B))
constant-fun-is-cont-mon {B} {D} b = record { g = Œª x ‚Üí inj b
                                            ; mon = Œª x ‚Üí x‚âºx
                                            }
constant-fun-is-cont {B} {D} b = record { mon = constant-fun-is-cont-mon {B} {D} b
                                        ; lub-preserve = Œª c ‚Üí antisymmetric (pos (flat-domain B))
                                            (lub1
                                              {pos (flat-domain B)}
                                              {chain-map c (constant-fun-is-cont-mon {B} {D} b)}
                                              (chain-complete-flat-domain-pos-B (chain-map c (constant-fun-is-cont-mon {B} {D} b)))
                                              {0}
                                            )
                                            (lub2
                                              {pos (flat-domain B)}
                                              {chain-map c (constant-fun-is-cont-mon {B} {D} b)}
                                              (chain-complete-flat-domain-pos-B (chain-map c (constant-fun-is-cont-mon {B} {D} b)))
                                              {inj b}
                                              (Œª {n} ‚Üí x‚âºx)
                                            )
                                        }

pair-f : ‚àÄ {D D‚ÇÅ D‚ÇÇ : domain} ‚Üí cont-fun D D‚ÇÅ ‚Üí cont-fun D D‚ÇÇ ‚Üí cont-fun D (domain-product D‚ÇÅ D‚ÇÇ)
g (mon (pair-f f‚ÇÅ f‚ÇÇ)) x fzero = g (mon f‚ÇÅ) x
g (mon (pair-f f‚ÇÅ f‚ÇÇ)) x (fsucc i) = g (mon f‚ÇÇ) x
mon (mon (pair-f f‚ÇÅ f‚ÇÇ)) a‚â¶a‚Ä≤ posets2.fzero = mon (mon f‚ÇÅ) a‚â¶a‚Ä≤
mon (mon (pair-f f‚ÇÅ f‚ÇÇ)) a‚â¶a‚Ä≤ (posets2.fsucc y) = mon (mon f‚ÇÇ) a‚â¶a‚Ä≤
lub-preserve (pair-f f‚ÇÅ f‚ÇÇ) c = posets2.dependent-function-extensionality (Œª { fzero ‚Üí (lub-preserve f‚ÇÅ) c ; (fsucc x) ‚Üí (lub-preserve f‚ÇÇ) c })


_‚àò_ : ‚àÄ {D‚ÇÅ D‚ÇÇ D‚ÇÉ} ‚Üí cont-fun D‚ÇÇ D‚ÇÉ ‚Üí cont-fun D‚ÇÅ D‚ÇÇ ‚Üí cont-fun D‚ÇÅ D‚ÇÉ

‚àò-mon : ‚àÄ {D‚ÇÅ D‚ÇÇ D‚ÇÉ} ‚Üí cont-fun D‚ÇÇ D‚ÇÉ ‚Üí cont-fun D‚ÇÅ D‚ÇÇ ‚Üí monotone-fun (domain.pos D‚ÇÅ) (domain.pos D‚ÇÉ)
‚àò-mon f‚ÇÇ f‚ÇÅ = record { g = Œª x ‚Üí g (mon f‚ÇÇ) (g (mon f‚ÇÅ) x)
                     ; mon = Œª a‚â§a‚Ä≤ ‚Üí mon (mon f‚ÇÇ) (mon (mon f‚ÇÅ) a‚â§a‚Ä≤)
                     }


_‚àò_ {D‚ÇÅ = D‚ÇÅ} {D‚ÇÇ = D‚ÇÇ} {D‚ÇÉ = D‚ÇÉ} f‚ÇÇ f‚ÇÅ  =
                     record { mon = ‚àò-mon f‚ÇÇ f‚ÇÅ
                            ; lub-preserve = Œª c ‚Üí
                            begin
                              g (mon f‚ÇÇ) (g (mon f‚ÇÅ) (‚äî (chain-complete D‚ÇÅ c)))
                            ‚â°‚ü® cong (g (mon f‚ÇÇ)) (lub-preserve f‚ÇÅ c) ‚ü©
                              g (mon f‚ÇÇ) (‚äî (chain-complete D‚ÇÇ (chain-map c (mon f‚ÇÅ))))
                            ‚â°‚ü® lub-preserve f‚ÇÇ (chain-map c (mon f‚ÇÅ)) ‚ü©
                              ‚äî (chain-complete D‚ÇÉ (chain-map c (‚àò-mon f‚ÇÇ f‚ÇÅ)))
                            ‚àé 
                            }

extend-function : ‚àÄ {X Y} ‚Üí (X ‚Üí posets2.B‚ä• Y) ‚Üí cont-fun (flat-domain X) (flat-domain Y)
extend-function-mon : ‚àÄ {X Y} ‚Üí (X ‚Üí posets2.B‚ä• Y) ‚Üí monotone-fun (flat-domain-pos X) (flat-domain-pos Y)
extend-function-mon f = record { g = Œª { ‚ä•‚ÇÅ ‚Üí ‚ä•‚ÇÅ
                                       ; (inj x) ‚Üí f x
                                       }
                               ; mon = Œª {z‚âºn ‚Üí z‚âºn; x‚âºx ‚Üí x‚âºx}
                               }

mon (extend-function {X} {Y} f) = extend-function-mon f
lub-preserve (extend-function {X} {Y} f) c = antisymmetric (flat-domain-pos Y)
  {!!}
  (lub2 (chain-complete-flat-domain-pos-B (chain-map c (extend-function-mon f)))
    (Œª {n} ‚Üí mon (extend-function-mon f) (lub1 (chain-complete (flat-domain X) c))))


‚Ñï‚ä• : domain
ùîπ‚ä• : domain

‚Ñï‚ä• = flat-domain ‚Ñï
ùîπ‚ä• = flat-domain Bool

domain-dependent-projection : (I : Set) ‚Üí (f : I ‚Üí domain) ‚Üí (i : I) ‚Üí cont-fun (domain-dependent-product I f) (f i)
domain-dependent-projection-mon : (I : Set) ‚Üí (f : I ‚Üí domain) ‚Üí (i : I) ‚Üí monotone-fun (pos (domain-dependent-product I f)) (pos (f i))
domain-dependent-projection-mon I f i = record { g = Œª p ‚Üí p i ; mon = Œª a‚â§a‚Ä≤ ‚Üí a‚â§a‚Ä≤ i } 


domain-dependent-projection I f i = record { mon = domain-dependent-projection-mon I f i
                                           ; lub-preserve = Œª c ‚Üí
                                               posets2.same-f-same-lub
                                                 {f i} {posets2.chain-of-functions I f c i} {chain-map c (domain-dependent-projection-mon I f i)}
                                                 refl
                                           }

-- if-mon {D} = record { g = (Œª { ‚ü® inj true , ‚ü® d , _ ‚ü© ‚ü© ‚Üí d
--                              ; ‚ü® inj false , ‚ü® _ , d‚Ä≤ ‚ü© ‚ü© ‚Üí d‚Ä≤
--                              ; ‚ü® ‚ä•‚ÇÅ , ‚ü® _ , _ ‚ü© ‚ü© ‚Üí posets2.least-element.‚ä• (domain.bottom D)
--                              })
--                     ; mon = Œª { {‚ü® ‚ä•‚ÇÅ , b‚ÇÅ ‚ü©} ‚Üí Œª a‚â§a‚Ä≤ ‚Üí (posets2.least-element.‚ä•-is-bottom (domain.bottom D))
--                               ; {‚ü® inj true , _ ‚ü©} {‚ü® inj true , _ ‚ü©} ‚Üí Œª a‚â§a‚Ä≤ ‚Üí proj‚ÇÅ (proj‚ÇÇ a‚â§a‚Ä≤)
--                               ; {‚ü® inj false , _ ‚ü©} {‚ü® inj false , _ ‚ü©} ‚Üí Œª a‚â§a‚Ä≤ ‚Üí proj‚ÇÇ (proj‚ÇÇ a‚â§a‚Ä≤)
--                               }
--                     }


pair : ‚àÄ {D} {E} ‚Üí (A (pos D)) ‚Üí (A (pos E)) ‚Üí A (pos (domain-product D E))
pair d e fzero = d
pair d e (fsucc fzero) = e

pair-equality : ‚àÄ {D} {E} ‚Üí {d‚ÇÅ d‚ÇÇ : A (pos D)} ‚Üí {e‚ÇÅ e‚ÇÇ : A (pos E)} ‚Üí (d‚ÇÅ ‚â° d‚ÇÇ) ‚Üí (e‚ÇÅ ‚â° e‚ÇÇ) ‚Üí pair {D} {E} d‚ÇÅ e‚ÇÅ ‚â° pair {D} {E} d‚ÇÇ e‚ÇÇ
pair-equality refl refl = refl

pair-Œ∑ : ‚àÄ {D} {E} ‚Üí {a : poset.A (pos (domain-product D E))} ‚Üí pair {D} {E} (a fzero) (a (fsucc fzero)) ‚â° a
pair-Œ∑ = posets2.dependent-function-extensionality Œª {fzero ‚Üí refl; (fsucc fzero) ‚Üí refl}


slide-33-prop : ‚àÄ {D E F}
  ‚Üí (f : poset.A (domain.pos (domain-product D E)) ‚Üí poset.A (domain.pos F))
  ‚Üí ({d d‚Ä≤ : poset.A (domain.pos D)} ‚Üí {e : poset.A (domain.pos E)} ‚Üí (poset.R (domain.pos D)) d d‚Ä≤ ‚Üí (poset.R (domain.pos F)) (f (pair d e)) (f (pair d‚Ä≤ e)))
  ‚Üí ({d : poset.A (domain.pos D)} ‚Üí {e e‚Ä≤ : poset.A (domain.pos E)} ‚Üí (poset.R (domain.pos E)) e e‚Ä≤ ‚Üí (poset.R (domain.pos F)) (f (pair d e)) (f (pair d e‚Ä≤)))
  ‚Üí monotone-fun (domain.pos (domain-product D E)) (domain.pos F)

g (slide-33-prop {D} {E} {F} f mon-arg-1 mon-arg-2) = f
mon (slide-33-prop {D} {E} {F} f mon-arg-1 mon-arg-2) {a} {a‚Ä≤} a‚â§a‚Ä≤ =
  transitive (pos F)
    {!!}
    {!!}

chain-fix-d-slide-33 : ‚àÄ {D E}
  ‚Üí chain (pos (domain-product D E))
  ‚Üí poset.A (domain.pos D)
  ‚Üí chain (pos (domain-product D E))


g (monotone (chain-fix-d-slide-33 {D} {E} c d)) n fzero = d
g (monotone (chain-fix-d-slide-33 {D} {E} c d)) n (fsucc i) = g (monotone (proj‚ÇÇ-chain {D} {E} c)) n
mon (monotone (chain-fix-d-slide-33 {D} {E} c d)) a‚â§a‚Ä≤ fzero = reflexive (pos D)
mon (monotone (chain-fix-d-slide-33 {D} {E} c d)) a‚â§a‚Ä≤ (fsucc fzero) = mon (monotone c) a‚â§a‚Ä≤ (fsucc fzero)

chain-fix-e-slide-33 : ‚àÄ {D E}
  ‚Üí chain (pos (domain-product D E))
  ‚Üí A (pos E)
  ‚Üí chain (pos (domain-product D E))


g (monotone (chain-fix-e-slide-33 {D} {E} c _)) n fzero = g (monotone (posets2.proj‚ÇÅ-chain {D} {E} c)) n
g (monotone (chain-fix-e-slide-33 _ e)) _ (fsucc fzero) = e
mon (monotone (chain-fix-e-slide-33 c _)) a‚â§a‚Ä≤ fzero = mon (monotone c) a‚â§a‚Ä≤ fzero
mon (monotone (chain-fix-e-slide-33 {E = E} _ _)) _ (fsucc fzero) = poset.reflexive (pos E)


slide-33-prop-cont : ‚àÄ {D E F}
  ‚Üí (f : (A (pos (domain-product D E)) ‚Üí A (pos F)))
  ‚Üí (mon-arg-1 : {d d‚Ä≤ : A (pos D)} ‚Üí {e : A (pos E)} ‚Üí (R (pos D)) d d‚Ä≤ ‚Üí (R (pos F)) (f (pair d e) ) (f (pair d‚Ä≤ e)))
  ‚Üí (mon-arg-2 : {d : A (pos D)} ‚Üí {e e‚Ä≤ : A (pos E)} ‚Üí (R (pos E)) e e‚Ä≤ ‚Üí (R (pos F)) (f (pair d e) ) (f (pair d e‚Ä≤)))
  ‚Üí ({c : chain (product-pos D E)}
    ‚Üí {e : A (pos E)}
    ‚Üí f (pair (‚äî (chain-complete D (proj‚ÇÅ-chain {D} {E} c))) e)
      ‚â°
      ‚äî (chain-complete F (chain-map (chain-fix-e-slide-33 {D} {E} c e) (slide-33-prop {D} {E} {F} f mon-arg-1 mon-arg-2)))
    )
  ‚Üí ({c : chain (pos (domain-product D E))}
    ‚Üí {d : A (pos D)}
    ‚Üí f (pair d (‚äî (chain-complete E (proj‚ÇÇ-chain {D} {E} c))))
      ‚â°
      ‚äî (chain-complete F (chain-map (chain-fix-d-slide-33 {D} {E} c d) (slide-33-prop {D} {E} {F} f mon-arg-1 mon-arg-2)))
    )
  ‚Üí cont-fun (domain-product D E) F

[d‚Çô,e‚Çô],f‚Üíf[d‚Çô,‚äîe‚±º] : {D E F : domain} ‚Üí (c : chain (pos (domain-product D E))) ‚Üí (f : monotone-fun (pos (domain-product D E)) (pos F)) ‚Üí chain (pos F)
[d‚Çô,e‚Çô],f‚Üíf[d‚Çô,‚äîe‚±º] {D} {E} {F} c f = record
  { monotone = record
    { g = Œª n ‚Üí g f (pair (g (monotone (posets2.proj‚ÇÅ-chain c)) n) (‚äî (chain-complete E (posets2.proj‚ÇÇ-chain c))))
    ; mon = Œª n‚â§n‚Ä≤ ‚Üí mon f (Œª {fzero ‚Üí (mon (monotone c) n‚â§n‚Ä≤ fzero); (fsucc fzero) ‚Üí reflexive (pos E)})
    }
  }

[d‚Çô,e‚Çô],f,n‚Üíf[d‚Çô,e‚±º] : {D E F : domain} ‚Üí (c : chain (pos (domain-product D E))) ‚Üí (f : monotone-fun (pos (domain-product D E)) (pos F)) ‚Üí ‚Ñï ‚Üí chain (pos F)
[d‚Çô,e‚Çô],f,n‚Üíf[d‚Çô,e‚±º] {D} {E} {F} c f n = record
  { monotone = record
    { g = Œª j ‚Üí g f (pair (g (monotone (posets2.proj‚ÇÅ-chain c)) n) (g (monotone (posets2.proj‚ÇÇ-chain c)) j))
    ; mon = Œª j‚â§j‚Ä≤ ‚Üí mon f Œª { fzero ‚Üí reflexive (pos D); (fsucc fzero) ‚Üí mon (monotone c) j‚â§j‚Ä≤ (fsucc fzero)}
    }
  }

[d‚Çô,e‚Çô],f‚Üí‚äî‚±º[f[d‚Çô,e‚±º]] : {D E F : domain} ‚Üí (c : chain (pos (domain-product D E))) ‚Üí (f : monotone-fun (pos (domain-product D E)) (pos F)) ‚Üí chain (pos F)
[d‚Çô,e‚Çô],f‚Üí‚äî‚±º[f[d‚Çô,e‚±º]] {D} {E} {F} c f = record
  { monotone = record
    { g = Œª n ‚Üí ‚äî (chain-complete F ([d‚Çô,e‚Çô],f,n‚Üíf[d‚Çô,e‚±º] {D} {E} {F} c f n))
    ; mon = Œª {n} {n‚Ä≤} n‚â§n‚Ä≤ ‚Üí lub2 (chain-complete F ([d‚Çô,e‚Çô],f,n‚Üíf[d‚Çô,e‚±º] {D} {E} {F} c f n))
      (transitive (pos F)
        (mon f (Œª { fzero ‚Üí mon (monotone c) n‚â§n‚Ä≤ fzero ; (fsucc fzero) ‚Üí reflexive (pos E)}))
        (lub1 (chain-complete F ([d‚Çô,e‚Çô],f,n‚Üíf[d‚Çô,e‚±º] c f n‚Ä≤)))
      )
    }
  }

f[d·µ¢e‚±º] : {D E F : domain}
  ‚Üí chain (pos (domain-product D E))
  ‚Üí (f : (A (pos (domain-product D E)) ‚Üí A (pos F)))
  ‚Üí ({d d‚Ä≤ : A (pos D)} ‚Üí {e : A (pos E)} ‚Üí (R (pos D)) d d‚Ä≤ ‚Üí (R (pos F)) (f (pair d e) ) (f (pair d‚Ä≤ e)))
  ‚Üí ({d : A (pos D)} ‚Üí {e e‚Ä≤ : A (pos E)} ‚Üí (R (pos E)) e e‚Ä≤ ‚Üí (R (pos F)) (f (pair d e) ) (f (pair d e‚Ä≤)))
  ‚Üí monotone-fun posets2.nats¬≤-pos (pos F)

g (f[d·µ¢e‚±º] {D} {E} {F} c f mon-arg-1 mon-arg-2) ‚ü® i , j ‚ü© = let d·µ¢ = g (monotone (proj‚ÇÅ-chain c)) i in
                                                            let e‚±º = g (monotone (proj‚ÇÇ-chain c)) j in
                                                            f (pair d·µ¢ e‚±º)

mon (f[d·µ¢e‚±º] {D} {E} {F} c f mon-arg-1 mon-arg-2) ‚ü® i‚â§i‚Ä≤ , j‚â§j‚Ä≤ ‚ü© = let mon-f = mon (slide-33-prop f mon-arg-1 mon-arg-2) in
                                                                    {!mon-f (mon (monotone c) ?)!} 


mon (slide-33-prop-cont {D} {E} {F} f mon-arg-1 mon-arg-2 _ _) = slide-33-prop {D} {E} {F} f mon-arg-1 mon-arg-2
lub-preserve (slide-33-prop-cont {D} {E} {F} f mon-arg-1 mon-arg-2 cont-arg-1 cont-arg-2) c =
  let f-mon = slide-33-prop {D} {E} {F} f mon-arg-1 mon-arg-2 in
  let ‚äîd‚Çô = ‚äî (chain-complete D (posets2.proj‚ÇÅ-chain c)) in
  let ‚äîe‚Çô = ‚äî (chain-complete E (posets2.proj‚ÇÇ-chain c)) in
  let ‚äî[d‚Çôe‚Çô] = ‚äî (chain-complete (domain-product D E) c) in
  let ‚äî·µ¢f[d·µ¢,‚äîe‚±º] = ‚äî (chain-complete F ([d‚Çô,e‚Çô],f‚Üíf[d‚Çô,‚äîe‚±º] {D} {E} {F} c f-mon)) in
  let ‚äî·µ¢‚äî‚±ºf[d·µ¢,e‚±º] = ‚äî (chain-complete F ([d‚Çô,e‚Çô],f‚Üí‚äî‚±º[f[d‚Çô,e‚±º]] {D} {E} {F} c f-mon)) in
  begin
    f ‚äî[d‚Çôe‚Çô]
  ‚â°‚ü® cong f (Eq.sym pair-Œ∑) ‚ü©
    f (pair (‚äîd‚Çô) (‚äîe‚Çô))
  ‚â°‚ü® cont-arg-1 {c} {‚äîe‚Çô} ‚ü©
    ‚äî (chain-complete F (chain-map (chain-fix-e-slide-33 c ‚äîe‚Çô) f-mon))
  ‚â°‚ü® posets2.same-f-same-lub {F} {chain-map (chain-fix-e-slide-33 c ‚äîe‚Çô) f-mon} {[d‚Çô,e‚Çô],f‚Üíf[d‚Çô,‚äîe‚±º] {D} {E} {F} c f-mon}
      (posets2.function-extensionality Œª n ‚Üí
        cong f (posets2.dependent-function-extensionality Œª {fzero ‚Üí refl; (fsucc fzero) ‚Üí refl}))
   ‚ü©
    ‚äî·µ¢f[d·µ¢,‚äîe‚±º]
  ‚â°‚ü® posets2.same-f-same-lub
       {F} {[d‚Çô,e‚Çô],f‚Üíf[d‚Çô,‚äîe‚±º] c f-mon} {{!!}}
       (posets2.function-extensionality Œª n ‚Üí cont-arg-2)
   ‚ü©
     {!!}                
  ‚â°‚ü® {!!} ‚ü©
    ‚äî·µ¢‚äî‚±ºf[d·µ¢,e‚±º]
  ‚â°‚ü® same-f-same-lub
       {F} {[d‚Çô,e‚Çô],f‚Üí‚äî‚±º[f[d‚Çô,e‚±º]] c f-mon} {posets2.chain-‚äîf‚Çô‚Çñ-with-n-fixed F (f[d·µ¢e‚±º] {D} {E} {F} c f mon-arg-1 mon-arg-2)}
       (posets2.function-extensionality {!!})
   ‚ü©
    ‚äî (chain-complete F (posets2.chain-‚äîf‚Çô‚Çñ-with-n-fixed F (f[d·µ¢e‚±º] {D} {E} {F} c f mon-arg-1 mon-arg-2)))
  ‚â°‚ü® posets2.diagonalising-lemma-1 F (f[d·µ¢e‚±º] {D} {E} {F} c f mon-arg-1 mon-arg-2) ‚ü©
    ‚äî (chain-complete F (posets2.f‚Çñ‚Çñ-chain F (f[d·µ¢e‚±º] {D} {E} {F} c f mon-arg-1 mon-arg-2)))
  ‚â°‚ü® same-f-same-lub
       {F} {posets2.f‚Çñ‚Çñ-chain F (f[d·µ¢e‚±º] {D} {E} {F} c f mon-arg-1 mon-arg-2)} {chain-map c f-mon}
       (posets2.function-extensionality (Œª x ‚Üí cong f pair-Œ∑))
   ‚ü©
    ‚äî (chain-complete F (chain-map c f-mon))
  ‚àé

if-g : ‚àÄ {D} ‚Üí A (pos (domain-product ùîπ‚ä• (domain-product D D))) ‚Üí A (pos D)
if-g {D} x with (x fzero)
...                     | inj false = x (fsucc fzero) (fsucc fzero)
...                     | inj true  = x (fsucc fzero) fzero
...                     | ‚ä•‚ÇÅ        = posets2.least-element.‚ä• (bottom D)


if-mon-first : {D : domain} ‚Üí {b b‚Ä≤ : A (pos ùîπ‚ä•)} ‚Üí {e : A (pos (domain-product D D))} ‚Üí (poset.R (domain.pos ùîπ‚ä•)) b b‚Ä≤ ‚Üí (poset.R (domain.pos D)) (if-g {D} (pair b e) ) (if-g {D} (pair b‚Ä≤ e))


if-mon-first {D} z‚âºn = posets2.least-element.‚ä•-is-bottom (bottom D)
if-mon-first {D} x‚âºx = reflexive (pos D)

if-mon-second : {D : domain} ‚Üí ({b : posets2.B‚ä• Bool} ‚Üí {e e‚Ä≤ : poset.A (domain.pos (domain-product D D))} ‚Üí (poset.R (domain.pos (domain-product D D))) e e‚Ä≤ ‚Üí (poset.R (domain.pos D)) (if-g {D} (pair b e)) (if-g {D} (pair b e‚Ä≤)))
if-mon-second {D} {‚ä•‚ÇÅ} a = posets2.least-element.‚ä•-is-bottom (domain.bottom D)
if-mon-second {D} {inj false} e‚â§e‚Ä≤ = e‚â§e‚Ä≤ (fsucc fzero) 
if-mon-second {D} {inj true} e‚â§e‚Ä≤ = e‚â§e‚Ä≤ fzero --

if-cont-first : ‚àÄ {D}
  ‚Üí {c : chain (pos (domain-product ùîπ‚ä• (domain-product D D)))}
  ‚Üí {e : A (pos (domain-product D D))}
  ‚Üí if-g (pair (‚äî (chain-complete ùîπ‚ä• (posets2.proj‚ÇÅ-chain c))) e)
    ‚â°
    ‚äî (chain-complete D (chain-map (chain-fix-e-slide-33 c e) (slide-33-prop {ùîπ‚ä•} {domain-product D D} {D} if-g (if-mon-first {D}) (if-mon-second {D}))))

if-cont-first {D} {c} {e} = {!!}


if-cont-second : ‚àÄ {D}
  ‚Üí {c : chain (pos (domain-product ùîπ‚ä• (domain-product D D)))}
  ‚Üí {d : A (pos ùîπ‚ä•)}
  ‚Üí if-g (pair d (‚äî (chain-complete (domain-product D D) (proj‚ÇÇ-chain c))))
    ‚â°
    ‚äî (chain-complete D (chain-map (chain-fix-d-slide-33 c d) (slide-33-prop {ùîπ‚ä•} {domain-product D D} {D} if-g (if-mon-first {D}) (if-mon-second {D}))))

if-cont-second {D} {c} {‚ä•‚ÇÅ} = {!!}
if-cont-second {D} {c} {inj true} = {!!}
if-cont-second {D} {c} {inj false} = {!!}

if-cont : ‚àÄ {D} ‚Üí cont-fun (domain-product ùîπ‚ä• (domain-product D D)) D
if-mon : ‚àÄ {D} ‚Üí monotone-fun (posets2.product-pos ùîπ‚ä• (domain-product D D)) (pos D)
if-mon {D} = slide-33-prop {ùîπ‚ä•} {domain-product D D} {D} if-g (if-mon-first {D}) (if-mon-second {D})

if-cont {D} = slide-33-prop-cont {ùîπ‚ä•} {domain-product D D} {D} if-g (if-mon-first {D}) if-mon-second if-cont-first if-cont-second


cur-cont : ‚àÄ {D D‚Ä≤ E} ‚Üí cont-fun (domain-product D‚Ä≤ D) E ‚Üí cont-fun D‚Ä≤ (function-domain D E)

cur-mon : ‚àÄ {D D‚Ä≤ E} ‚Üí cont-fun (domain-product D‚Ä≤ D) E ‚Üí monotone-fun (pos D‚Ä≤) (pos (function-domain D E))

g (mon (g (cur-mon {D} {D‚Ä≤} {E} f) d‚Ä≤)) d = g (mon f) (pair d‚Ä≤ d)
mon (mon (g (cur-mon {D} {D‚Ä≤} {E} f) d‚Ä≤)) a‚â§a‚Ä≤ = mon (mon f) Œª {fzero ‚Üí reflexive (pos D‚Ä≤); (fsucc fzero) ‚Üí a‚â§a‚Ä≤}
lub-preserve (g (cur-mon {D} {D‚Ä≤} {E} f) d‚Ä≤) c =
  begin
    g (mon (g (cur-mon f) d‚Ä≤)) (‚äî (chain-complete D c))
  ‚â°‚ü® {!!} ‚ü©
    {!!}
  ‚â°‚ü® {!!} ‚ü©
    ‚äî (chain-complete E (chain-map c (mon (g (cur-mon f) d‚Ä≤))))
  ‚àé

mon (cur-mon {D} {D‚Ä≤} {E} f) a‚â§a‚Ä≤ = mon (mon f) Œª {fzero ‚Üí a‚â§a‚Ä≤; (fsucc fzero) ‚Üí reflexive (pos D)}

         
cur-cont {D} {D‚Ä≤} {E} f = record { mon = cur-mon {D} {D‚Ä≤} {E} f
                                 ; lub-preserve = Œª c ‚Üí {!!}
                                 }


ev-cont : ‚àÄ {D E} ‚Üí cont-fun (domain-product (function-domain D E) D) E
ev-mon : ‚àÄ {D E} ‚Üí monotone-fun (pos (domain-product (function-domain D E) D)) (pos E)

g (ev-mon {D} {E}) x = g (mon (x fzero)) (x (fsucc fzero))
mon (ev-mon {D} {E}) {x} {y} a‚â§a‚Ä≤ = transitive (pos E)
                                      (mon (mon (x fzero)) (a‚â§a‚Ä≤ (fsucc fzero)))
                                      (a‚â§a‚Ä≤ fzero {y (fsucc fzero)})

f‚Çô,d‚Çô‚Üíf‚Çô[d‚Çô] : ‚àÄ {D} {E} ‚Üí (c : chain (pos (domain-product (function-domain D E) D))) ‚Üí chain (pos E)
f‚Çô,d‚Çô‚Üíf‚Çô[d‚Çô] c = chain-map c ev-mon

f‚Çô,d‚Çô‚Üíf‚Çô[‚äîd‚Çô] : ‚àÄ {D} {E} ‚Üí (c : chain (pos (domain-product (function-domain D E) D))) ‚Üí chain (pos E)
f‚Çô,d‚Çô‚Üíf‚Çô[‚äîd‚Çô] {D} {E} c = record
  { monotone = record
    { g = Œª n ‚Üí g (mon (g (monotone (proj‚ÇÅ-chain c)) n)) (‚äî (domain.chain-complete D (proj‚ÇÇ-chain c)))
    ; mon = Œª a‚â§a‚Ä≤ ‚Üí mon (monotone c) a‚â§a‚Ä≤ fzero
    }
  }

f‚Çô,d‚Çô‚Üíf·µ¢d‚±º-chain : ‚àÄ {D} {E} ‚Üí (c : chain (pos (domain-product (function-domain D E) D))) ‚Üí ‚Ñï ‚Üí chain (pos E) 
f‚Çô,d‚Çô‚Üíf·µ¢d‚±º-chain {D} {E} c i = record
  { monotone = record
    { g = Œª j ‚Üí g (mon (g (monotone (posets2.proj‚ÇÅ-chain c)) i)) (g (monotone (posets2.proj‚ÇÇ-chain c)) j)
    ; mon = Œª a‚â§a‚Ä≤ ‚Üí mon (mon (g (monotone c) i fzero)) (mon (monotone c) a‚â§a‚Ä≤ (fsucc fzero))
    }
  }

f‚Çô,d‚Çô‚Üí‚äî‚±ºf·µ¢d‚±º :  ‚àÄ {D} {E} ‚Üí (c : chain (pos (domain-product (function-domain D E) D))) ‚Üí chain (pos E)

f‚Çô,d‚Çô‚Üí‚äî‚±ºf·µ¢d‚±º {D} {E} c = record
  { monotone = record
    { g = Œª i ‚Üí ‚äî (chain-complete E (f‚Çô,d‚Çô‚Üíf·µ¢d‚±º-chain {D} {E} c i))
    ; mon = Œª {a} {a‚Ä≤} a‚â§a‚Ä≤ ‚Üí lub2 (chain-complete E (f‚Çô,d‚Çô‚Üíf·µ¢d‚±º-chain c a))
      Œª {n} ‚Üí poset.transitive (pos E)
        (mon (monotone c) a‚â§a‚Ä≤ (fzero))
        (lub1 (chain-complete E (f‚Çô,d‚Çô‚Üíf·µ¢d‚±º-chain c a‚Ä≤)))
    }
  }

f·µ¢d‚±º : {D E : domain} ‚Üí chain (pos (domain-product (function-domain D E) D)) ‚Üí monotone-fun posets2.nats¬≤-pos (pos E)
g (f·µ¢d‚±º c) ‚ü® i , j ‚ü© = let f·µ¢ = g (mon (g (monotone (proj‚ÇÅ-chain c)) i)) in
                       let d‚±º = g (monotone (proj‚ÇÇ-chain c)) j in
                       f·µ¢ d‚±º

mon (f·µ¢d‚±º {D} {E} c) {a} {a‚Ä≤} ‚ü® i‚â§i‚Ä≤ , j‚â§j‚Ä≤ ‚ü© =
  transitive (pos E)
    ((mon (monotone c) i‚â§i‚Ä≤) fzero)
    (mon (mon (g (monotone c) (proj‚ÇÅ a‚Ä≤) fzero)) (mon (monotone c) j‚â§j‚Ä≤ (fsucc fzero)))



mon (ev-cont {D} {E}) = ev-mon {D} {E}
lub-preserve (ev-cont {D} {E}) c =
   let ev = monotone-fun.g (ev-mon {D} {E}) in
   let D‚ÜíE = function-domain D E in
   let f‚Çô-chain = proj‚ÇÅ-chain {D‚ÜíE} {D} c in
   let d‚Çô-chain = proj‚ÇÇ-chain {D‚ÜíE} {D} c in
   let ‚äîf‚Çô = posets2.function-domain-‚äî D E f‚Çô-chain in
   let ‚äîd‚Çô = posets2.lub.‚äî (domain.chain-complete D d‚Çô-chain) in
   let ev[‚äîf‚Çô,‚äîd‚Çô] = ev (posets2.lub.‚äî (domain.chain-complete (domain-product (D‚ÜíE) D) c)) in
   let [‚äîf‚Çô][‚äîd‚Çô] = monotone-fun.g (cont-fun.mon ‚äîf‚Çô) ‚äîd‚Çô in
   let ‚äî[f‚Çô[‚äîd‚Çô]] = posets2.lub.‚äî (domain.chain-complete E (f‚Çô,d‚Çô‚Üíf‚Çô[‚äîd‚Çô] c)) in
   let ‚äî·µ¢‚äî‚±ºf·µ¢d‚±º = posets2.lub.‚äî (domain.chain-complete E (f‚Çô,d‚Çô‚Üí‚äî‚±ºf·µ¢d‚±º c)) in
   let ‚äîf‚Çôd‚Çô = posets2.lub.‚äî (domain.chain-complete E (f‚Çô,d‚Çô‚Üíf‚Çô[d‚Çô] c)) in
   let ‚äîev[f‚Çô,d‚Çô] = posets2.lub.‚äî (domain.chain-complete E (chain-map c ev-mon)) in
  begin
    ev[‚äîf‚Çô,‚äîd‚Çô]
  ‚â°‚ü® refl ‚ü©
    [‚äîf‚Çô][‚äîd‚Çô]
  ‚â°‚ü® same-f-same-lub
       {E} {posets2.chain-of-f‚Çô[d] D E f‚Çô-chain ‚äîd‚Çô} {f‚Çô,d‚Çô‚Üíf‚Çô[‚äîd‚Çô] c}
       refl
   ‚ü©
    ‚äî[f‚Çô[‚äîd‚Çô]]
  ‚â°‚ü® same-f-same-lub
       {E} {f‚Çô,d‚Çô‚Üíf‚Çô[‚äîd‚Çô] c} {f‚Çô,d‚Çô‚Üí‚äî‚±ºf·µ¢d‚±º c}
       (posets2.function-extensionality Œª n ‚Üí lub-preserve (g (monotone f‚Çô-chain) n) d‚Çô-chain)
   ‚ü©
    ‚äî·µ¢‚äî‚±ºf·µ¢d‚±º
  ‚â°‚ü® same-f-same-lub
        {E} {f‚Çô,d‚Çô‚Üí‚äî‚±ºf·µ¢d‚±º c} {posets2.chain-‚äîf‚Çô‚Çñ-with-n-fixed E (f·µ¢d‚±º c)}
        (posets2.function-extensionality (Œª x ‚Üí
           same-f-same-lub
             {E} {f‚Çô,d‚Çô‚Üíf·µ¢d‚±º-chain c x} {posets2.chain-f‚Çò‚Çô-with-m-fixed E (f·µ¢d‚±º c) x}
             refl))
   ‚ü©
    ‚äî ((chain-complete E) (posets2.chain-‚äîf‚Çô‚Çñ-with-n-fixed E (f·µ¢d‚±º c)))
  ‚â°‚ü® posets2.diagonalising-lemma-1 E (f·µ¢d‚±º c) ‚ü©
    ‚äî ((chain-complete E) (posets2.f‚Çñ‚Çñ-chain E (f·µ¢d‚±º c)))
  ‚â°‚ü® same-f-same-lub
       {E} {posets2.f‚Çñ‚Çñ-chain E (f·µ¢d‚±º c)} {f‚Çô,d‚Çô‚Üíf‚Çô[d‚Çô] c}
       (posets2.function-extensionality (Œª x ‚Üí refl) )
   ‚ü©
    ‚äîf‚Çôd‚Çô
  ‚â°‚ü® refl ‚ü©
    ‚äîev[f‚Çô,d‚Çô]
    ‚àé


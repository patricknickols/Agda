module useful-functions where

import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; cong; refl)
open Eq.‚â°-Reasoning
open import Data.Nat using (‚Ñï)
open import Data.Bool using (Bool; true; false)
open import posets2
open import Data.Product renaming (_,_ to ‚ü®_,_‚ü©)

open poset
open domain
open monotone-fun
open cont-fun
open lub
open chain
open eventually-constant

constant-fun-is-cont : {B : Set} ‚Üí {D : domain} ‚Üí B ‚Üí cont-fun D (flat-domain B)
constant-fun-is-cont-mon : {B : Set} ‚Üí {D : domain} ‚Üí B ‚Üí monotone-fun (pos D) (pos (flat-domain B))
constant-fun-is-cont-mon {B} {D} b = record { g = Œª x ‚Üí inj b
                                            ; mon = Œª x ‚Üí x‚âºx
                                            }
constant-fun-is-cont {B} {D} b = record { mon = constant-fun-is-cont-mon {B} {D} b
                                        ; lub-preserve = Œª c ‚Üí antisymmetric (pos (flat-domain B))
                                            (lub1
                                              {pos (flat-domain B)}
                                              {chain-map c (constant-fun-is-cont-mon {B} {D} b)}
                                              (chain-complete (flat-domain B) (chain-map c (constant-fun-is-cont-mon {B} {D} b)))
                                              {0}
                                            )
                                            (lub2
                                              {pos (flat-domain B)}
                                              {chain-map c (constant-fun-is-cont-mon {B} {D} b)}
                                              (chain-complete (flat-domain B) (chain-map c (constant-fun-is-cont-mon {B} {D} b)))
                                              {inj b}
                                              (Œª {n} ‚Üí x‚âºx)
                                            )
                                        }

pair-f : ‚àÄ {D D‚ÇÅ D‚ÇÇ : domain} ‚Üí cont-fun D D‚ÇÅ ‚Üí cont-fun D D‚ÇÇ ‚Üí cont-fun D (domain-product D‚ÇÅ D‚ÇÇ)
g (mon (pair-f f‚ÇÅ f‚ÇÇ)) x fzero = g (mon f‚ÇÅ) x
g (mon (pair-f f‚ÇÅ f‚ÇÇ)) x (fsucc i) = g (mon f‚ÇÇ) x
mon (mon (pair-f f‚ÇÅ f‚ÇÇ)) a‚â¶a‚Ä≤ fzero = mon (mon f‚ÇÅ) a‚â¶a‚Ä≤
mon (mon (pair-f f‚ÇÅ f‚ÇÇ)) a‚â¶a‚Ä≤ (fsucc y) = mon (mon f‚ÇÇ) a‚â¶a‚Ä≤
lub-preserve (pair-f f‚ÇÅ f‚ÇÇ) c = dependent-function-extensionality (Œª { fzero ‚Üí (lub-preserve f‚ÇÅ) c ; (fsucc x) ‚Üí (lub-preserve f‚ÇÇ) c })


_‚àò_ : ‚àÄ {D‚ÇÅ D‚ÇÇ D‚ÇÉ} ‚Üí cont-fun D‚ÇÇ D‚ÇÉ ‚Üí cont-fun D‚ÇÅ D‚ÇÇ ‚Üí cont-fun D‚ÇÅ D‚ÇÉ

‚àò-mon : ‚àÄ {D‚ÇÅ D‚ÇÇ D‚ÇÉ} ‚Üí cont-fun D‚ÇÇ D‚ÇÉ ‚Üí cont-fun D‚ÇÅ D‚ÇÇ ‚Üí monotone-fun (domain.pos D‚ÇÅ) (domain.pos D‚ÇÉ)
‚àò-mon f‚ÇÇ f‚ÇÅ = record { g = Œª x ‚Üí g (mon f‚ÇÇ) (g (mon f‚ÇÅ) x)
                     ; mon = Œª a‚â§a‚Ä≤ ‚Üí mon (mon f‚ÇÇ) (mon (mon f‚ÇÅ) a‚â§a‚Ä≤)
                     }


_‚àò_ {D‚ÇÅ = D‚ÇÅ} {D‚ÇÇ = D‚ÇÇ} {D‚ÇÉ = D‚ÇÉ} f‚ÇÇ f‚ÇÅ  =
                     record { mon = ‚àò-mon f‚ÇÇ f‚ÇÅ
                            ; lub-preserve = Œª c ‚Üí
                            begin
                              g (mon f‚ÇÇ) (g (mon f‚ÇÅ) (‚äî (chain-complete D‚ÇÅ c)))
                            ‚â°‚ü® cong (g (mon f‚ÇÇ)) (lub-preserve f‚ÇÅ c) ‚ü©
                              g (mon f‚ÇÇ) (‚äî (chain-complete D‚ÇÇ (chain-map c (mon f‚ÇÅ))))
                            ‚â°‚ü® lub-preserve f‚ÇÇ (chain-map c (mon f‚ÇÅ)) ‚ü©
                              ‚äî (chain-complete D‚ÇÉ (chain-map c (‚àò-mon f‚ÇÇ f‚ÇÅ)))
                            ‚àé 
                            }

extend-function : ‚àÄ {X Y} ‚Üí (X ‚Üí B‚ä• Y) ‚Üí cont-fun (flat-domain X) (flat-domain Y)
extend-function-mon : ‚àÄ {X Y} ‚Üí (X ‚Üí B‚ä• Y) ‚Üí monotone-fun (flat-domain-pos X) (flat-domain-pos Y)
extend-function-mon f = record { g = Œª { ‚ä•‚ÇÅ ‚Üí ‚ä•‚ÇÅ
                                       ; (inj x) ‚Üí f x
                                       }
                               ; mon = Œª {z‚âºn ‚Üí z‚âºn; x‚âºx ‚Üí x‚âºx}
                               }

mon (extend-function {X} {Y} f) = extend-function-mon f

lub-preserve (extend-function {X} {Y} f) c = constant-UP-useful
  {flat-domain-pos Y}
  {chain-map c (extend-function-mon f)}
  {flat-domain-chain-eventually-constant (chain-map c (extend-function-mon f))}
  {g (mon (extend-function f)) (‚äî (chain-complete (flat-domain X) c))}
  {index (flat-domain-chain-eventually-constant c)}
  (Œª {m} index‚â§m ‚Üí
    cong
      (g (mon (extend-function f)))
      (eventually-val (flat-domain-chain-eventually-constant c) index‚â§m))
           
‚Ñï‚ä• : domain
ùîπ‚ä• : domain

‚Ñï‚ä• = flat-domain ‚Ñï
ùîπ‚ä• = flat-domain Bool

domain-dependent-projection : (I : Set) ‚Üí (f : I ‚Üí domain) ‚Üí (i : I) ‚Üí cont-fun (domain-dependent-product I f) (f i)
domain-dependent-projection-mon : (I : Set) ‚Üí (f : I ‚Üí domain) ‚Üí (i : I) ‚Üí monotone-fun (pos (domain-dependent-product I f)) (pos (f i))
domain-dependent-projection-mon I f i = record { g = Œª p ‚Üí p i ; mon = Œª a‚â§a‚Ä≤ ‚Üí a‚â§a‚Ä≤ i } 


domain-dependent-projection I f i = record { mon = domain-dependent-projection-mon I f i
                                           ; lub-preserve = Œª c ‚Üí
                                               same-f-same-lub
                                                 {f i} {chain-of-functions I f c i} {chain-map c (domain-dependent-projection-mon I f i)}
                                                 refl
                                           }

pair : ‚àÄ {D} {E} ‚Üí (A (pos D)) ‚Üí (A (pos E)) ‚Üí A (pos (domain-product D E))
pair d e fzero = d
pair d e (fsucc fzero) = e

pair-equality : ‚àÄ {D} {E} ‚Üí {d‚ÇÅ d‚ÇÇ : A (pos D)} ‚Üí {e‚ÇÅ e‚ÇÇ : A (pos E)} ‚Üí (d‚ÇÅ ‚â° d‚ÇÇ) ‚Üí (e‚ÇÅ ‚â° e‚ÇÇ) ‚Üí pair {D} {E} d‚ÇÅ e‚ÇÅ ‚â° pair {D} {E} d‚ÇÇ e‚ÇÇ
pair-equality refl refl = refl

pair-Œ∑ : ‚àÄ {D} {E} ‚Üí {a : poset.A (pos (domain-product D E))} ‚Üí pair {D} {E} (a fzero) (a (fsucc fzero)) ‚â° a
pair-Œ∑ = dependent-function-extensionality Œª {fzero ‚Üí refl; (fsucc fzero) ‚Üí refl}


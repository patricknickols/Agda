module if-cont where

import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; cong; refl)
open Eq.‚â°-Reasoning
open import Data.Nat using (‚Ñï)
open import Data.Bool using (Bool; true; false)
open import posets2
open import useful-functions using (ùîπ‚ä•; pair; pair-Œ∑)
open import Data.Product renaming (_,_ to ‚ü®_,_‚ü©)

open poset
open domain
open monotone-fun
open cont-fun
open lub
open chain


poset-projections : (P‚ÇÅ P‚ÇÇ : poset) ‚Üí (Fin 2) ‚Üí poset
poset-projections P‚ÇÅ P‚ÇÇ fzero = P‚ÇÅ
poset-projections P‚ÇÅ P‚ÇÇ (fsucc x) = P‚ÇÇ

poset-dependent-product : (I : Set) ‚Üí (I ‚Üí poset) ‚Üí poset
poset-dependent-R : (I : Set) ‚Üí (f : I ‚Üí poset) ‚Üí ((i : I) ‚Üí (A (f i)))  ‚Üí ((i : I) ‚Üí (A (f i))) ‚Üí Set

poset-dependent-R I f p‚ÇÅ p‚ÇÇ = (i : I) ‚Üí R (f i) (p‚ÇÅ i) (p‚ÇÇ i)

poset-dependent-refl : (I : Set) ‚Üí (f : I ‚Üí poset) ‚Üí {p : (i : I) ‚Üí (A (f i))} ‚Üí poset-dependent-R I f p p
poset-dependent-refl I f i = reflexive (f i)


poset-dependent-antisym : (I : Set) ‚Üí (f : I ‚Üí poset) ‚Üí {p‚ÇÅ p‚ÇÇ : (i : I) ‚Üí (A (f i))} ‚Üí poset-dependent-R I f p‚ÇÅ p‚ÇÇ ‚Üí poset-dependent-R I f p‚ÇÇ p‚ÇÅ ‚Üí p‚ÇÅ ‚â° p‚ÇÇ
poset-dependent-antisym I f p‚ÇÅ‚â§p‚ÇÇ p‚ÇÇ‚â§p‚ÇÅ = dependent-function-extensionality Œª i ‚Üí antisymmetric (f i) (p‚ÇÅ‚â§p‚ÇÇ i) (p‚ÇÇ‚â§p‚ÇÅ i)


poset-dependent-trans : (I : Set) ‚Üí (f : I ‚Üí poset) ‚Üí {p‚ÇÅ p‚ÇÇ p‚ÇÉ : (i : I) ‚Üí (A (f i))} ‚Üí poset-dependent-R I f p‚ÇÅ p‚ÇÇ ‚Üí poset-dependent-R I f p‚ÇÇ p‚ÇÉ ‚Üí poset-dependent-R I f p‚ÇÅ p‚ÇÉ
poset-dependent-trans I f p‚ÇÅ‚â§p‚ÇÇ p‚ÇÇ‚â§p‚ÇÉ = Œª i ‚Üí transitive (f i) (p‚ÇÅ‚â§p‚ÇÇ i) (p‚ÇÇ‚â§p‚ÇÉ i)


poset-dependent-product I f = record
                                   { A = (i : I) ‚Üí A (f i)
                                   ; R = poset-dependent-R I f
                                   ; reflexive = poset-dependent-refl I f
                                   ; antisymmetric = poset-dependent-antisym I f
                                   ; transitive = poset-dependent-trans I f
                                   }

poset-product : poset ‚Üí poset ‚Üí poset

poset-product P‚ÇÅ P‚ÇÇ = poset-dependent-product (Fin 2) (poset-projections P‚ÇÅ P‚ÇÇ)

pair-pos : ‚àÄ {D} {E} ‚Üí A D ‚Üí A E ‚Üí A (poset-product D E)
pair-pos d e fzero = d
pair-pos d e (fsucc fzero) = e

pair-Œ∑-pos : ‚àÄ {D} {E} ‚Üí {a : A (poset-product D E)} ‚Üí pair-pos {D} {E} (a fzero) (a (fsucc fzero)) ‚â° a
pair-Œ∑-pos = posets2.dependent-function-extensionality Œª {fzero ‚Üí refl; (fsucc fzero) ‚Üí refl}

a‚â§b‚â°c‚Üía‚â§c‚ÇÇ : {D : Set} {_‚äë_ : D ‚Üí D ‚Üí Set} {a b c : D} ‚Üí a ‚äë b ‚Üí b ‚â° c ‚Üí a ‚äë c
a‚â§b‚â°c‚Üía‚â§c‚ÇÇ a‚â§b Eq.refl = a‚â§b

slide-33-prop : ‚àÄ {D E F}
  ‚Üí (f : poset.A (domain.pos (domain-product D E)) ‚Üí poset.A (domain.pos F))
  ‚Üí ({d d‚Ä≤ : poset.A (domain.pos D)} ‚Üí {e : poset.A (domain.pos E)} ‚Üí (poset.R (domain.pos D)) d d‚Ä≤ ‚Üí (poset.R (domain.pos F)) (f (pair d e)) (f (pair d‚Ä≤ e)))
  ‚Üí ({d : poset.A (domain.pos D)} ‚Üí {e e‚Ä≤ : poset.A (domain.pos E)} ‚Üí (poset.R (domain.pos E)) e e‚Ä≤ ‚Üí (poset.R (domain.pos F)) (f (pair d e)) (f (pair d e‚Ä≤)))
  ‚Üí monotone-fun (domain.pos (domain-product D E)) (domain.pos F)

g (slide-33-prop {D} {E} {F} f mon-arg-1 mon-arg-2) = f
mon (slide-33-prop {D} {E} {F} f mon-arg-1 mon-arg-2) a‚â§a‚Ä≤ =
  transitive (pos F)
    (a‚â°b‚â§c‚Üía‚â§c {A (pos F)} {R (pos F)} (Eq.sym (cong f (pair-Œ∑))) (mon-arg-1 (a‚â§a‚Ä≤ fzero)))
    (a‚â§b‚â°c‚Üía‚â§c‚ÇÇ {A (pos F)} {R (pos F)} (mon-arg-2 (a‚â§a‚Ä≤ (fsucc fzero))) (cong f (pair-Œ∑)) )

slide-33-prop‚Ä≤ : {D E F : poset}
  ‚Üí (f : A (poset-product D E) ‚Üí A F)
  ‚Üí ({d d‚Ä≤ : A D} ‚Üí {e : A E} ‚Üí (R D) d d‚Ä≤ ‚Üí (R F) (f (pair-pos d e)) (f (pair-pos d‚Ä≤ e)))
  ‚Üí ({d : A D} ‚Üí {e e‚Ä≤ : A E} ‚Üí (R E) e e‚Ä≤ ‚Üí (R F) (f (pair-pos d e)) (f (pair-pos d e‚Ä≤)))
  ‚Üí monotone-fun (poset-product D E) F


g (slide-33-prop‚Ä≤ {D} {E} {F} f mon-arg-1 mon-arg-2) = f
mon (slide-33-prop‚Ä≤ {D} {E} {F} f mon-arg-1 mon-arg-2) a‚â§a‚Ä≤ =
  transitive F
    (a‚â°b‚â§c‚Üía‚â§c
      {A F} {R F}
      (cong f (Eq.sym (pair-Œ∑-pos)))
      (mon-arg-1 (a‚â§a‚Ä≤ fzero)))
    (a‚â§b‚â°c‚Üía‚â§c‚ÇÇ
      {A F} {R F}
      (mon-arg-2 (a‚â§a‚Ä≤ (fsucc fzero)))
      (cong f (pair-Œ∑-pos)))


chain-fix-d-slide-33 : ‚àÄ {D E}
  ‚Üí chain (pos (domain-product D E))
  ‚Üí A (pos D)
  ‚Üí chain (pos (domain-product D E))


g (monotone (chain-fix-d-slide-33 {D} {E} c d)) n fzero = d
g (monotone (chain-fix-d-slide-33 {D} {E} c d)) n (fsucc i) = g (monotone (proj‚ÇÇ-chain {D} {E} c)) n
mon (monotone (chain-fix-d-slide-33 {D} {E} c d)) a‚â§a‚Ä≤ fzero = reflexive (pos D)
mon (monotone (chain-fix-d-slide-33 {D} {E} c d)) a‚â§a‚Ä≤ (fsucc fzero) = mon (monotone c) a‚â§a‚Ä≤ (fsucc fzero)

chain-fix-e-slide-33 : ‚àÄ {D E}
  ‚Üí chain (pos (domain-product D E))
  ‚Üí A (pos E)
  ‚Üí chain (pos (domain-product D E))


g (monotone (chain-fix-e-slide-33 {D} {E} c _)) n fzero = g (monotone (proj‚ÇÅ-chain {D} {E} c)) n
g (monotone (chain-fix-e-slide-33 _ e)) _ (fsucc fzero) = e
mon (monotone (chain-fix-e-slide-33 c _)) a‚â§a‚Ä≤ fzero = mon (monotone c) a‚â§a‚Ä≤ fzero
mon (monotone (chain-fix-e-slide-33 {E = E} _ _)) _ (fsucc fzero) = poset.reflexive (pos E)


slide-33-prop-cont : ‚àÄ {D E F}
   ‚Üí (f : (A (pos (domain-product D E)) ‚Üí A (pos F)))
   ‚Üí (mon-arg-1 : {d d‚Ä≤ : A (pos D)} ‚Üí {e : A (pos E)} ‚Üí (R (pos D)) d d‚Ä≤ ‚Üí (R (pos F)) (f (pair d e) ) (f (pair d‚Ä≤ e)))
   ‚Üí (mon-arg-2 : {d : A (pos D)} ‚Üí {e e‚Ä≤ : A (pos E)} ‚Üí (R (pos E)) e e‚Ä≤ ‚Üí (R (pos F)) (f (pair d e) ) (f (pair d e‚Ä≤)))
   ‚Üí ({c : chain (product-pos D E)}
     ‚Üí {e : A (pos E)}
     ‚Üí f (pair (‚äî (chain-complete D (proj‚ÇÅ-chain {D} {E} c))) e)
       ‚â°
       ‚äî (chain-complete F (chain-map (chain-fix-e-slide-33 {D} {E} c e) (slide-33-prop {D} {E} {F} f mon-arg-1 mon-arg-2)))
     )
   ‚Üí ({c : chain (pos (domain-product D E))}
     ‚Üí {d : A (pos D)}
     ‚Üí f (pair d (‚äî (chain-complete E (proj‚ÇÇ-chain {D} {E} c))))
       ‚â°
       ‚äî (chain-complete F (chain-map (chain-fix-d-slide-33 {D} {E} c d) (slide-33-prop {D} {E} {F} f mon-arg-1 mon-arg-2)))
     )
   ‚Üí cont-fun (domain-product D E) F

[d‚Çô,e‚Çô],f‚Üíf[d‚Çô,‚äîe‚±º] : {D E F : domain} ‚Üí (c : chain (pos (domain-product D E))) ‚Üí (f : monotone-fun (pos (domain-product D E)) (pos F)) ‚Üí chain (pos F)
[d‚Çô,e‚Çô],f‚Üíf[d‚Çô,‚äîe‚±º] {D} {E} {F} c f = record
  { monotone = record
    { g = Œª n ‚Üí g f (pair (g (monotone (posets2.proj‚ÇÅ-chain c)) n) (‚äî (chain-complete E (posets2.proj‚ÇÇ-chain c))))
    ; mon = Œª n‚â§n‚Ä≤ ‚Üí mon f (Œª {fzero ‚Üí (mon (monotone c) n‚â§n‚Ä≤ fzero); (fsucc fzero) ‚Üí reflexive (pos E)})
    }
  }

[d‚Çô,e‚Çô],f,n‚Üíf[d‚Çô,e‚±º] : {D E F : domain} ‚Üí (c : chain (pos (domain-product D E))) ‚Üí (f : monotone-fun (pos (domain-product D E)) (pos F)) ‚Üí ‚Ñï ‚Üí chain (pos F)
[d‚Çô,e‚Çô],f,n‚Üíf[d‚Çô,e‚±º] {D} {E} {F} c f n = record
  { monotone = record
    { g = Œª j ‚Üí g f (pair (g (monotone (posets2.proj‚ÇÅ-chain c)) n) (g (monotone (posets2.proj‚ÇÇ-chain c)) j))
    ; mon = Œª j‚â§j‚Ä≤ ‚Üí mon f Œª { fzero ‚Üí reflexive (pos D); (fsucc fzero) ‚Üí mon (monotone c) j‚â§j‚Ä≤ (fsucc fzero)}
    }
  }

[d‚Çô,e‚Çô],f‚Üí‚äî‚±º[f[d‚Çô,e‚±º]] : {D E F : domain} ‚Üí (c : chain (pos (domain-product D E))) ‚Üí (f : monotone-fun (pos (domain-product D E)) (pos F)) ‚Üí chain (pos F)
[d‚Çô,e‚Çô],f‚Üí‚äî‚±º[f[d‚Çô,e‚±º]] {D} {E} {F} c f = record
  { monotone = record
    { g = Œª n ‚Üí ‚äî (chain-complete F ([d‚Çô,e‚Çô],f,n‚Üíf[d‚Çô,e‚±º] {D} {E} {F} c f n))
    ; mon = Œª {n} {n‚Ä≤} n‚â§n‚Ä≤ ‚Üí lub2 (chain-complete F ([d‚Çô,e‚Çô],f,n‚Üíf[d‚Çô,e‚±º] {D} {E} {F} c f n))
      (transitive (pos F)
        (mon f (Œª { fzero ‚Üí mon (monotone c) n‚â§n‚Ä≤ fzero ; (fsucc fzero) ‚Üí reflexive (pos E)}))
        (lub1 (chain-complete F ([d‚Çô,e‚Çô],f,n‚Üíf[d‚Çô,e‚±º] {D} {E} {F} c f n‚Ä≤)))
      )
    }
  }

f[d·µ¢e‚±º] : {D E F : domain}
  ‚Üí chain (pos (domain-product D E))
  ‚Üí (f : (A (pos (domain-product D E)) ‚Üí A (pos F)))
  ‚Üí ({d d‚Ä≤ : A (pos D)} ‚Üí {e : A (pos E)} ‚Üí (R (pos D)) d d‚Ä≤ ‚Üí (R (pos F)) (f (pair d e) ) (f (pair d‚Ä≤ e)))
  ‚Üí ({d : A (pos D)} ‚Üí {e e‚Ä≤ : A (pos E)} ‚Üí (R (pos E)) e e‚Ä≤ ‚Üí (R (pos F)) (f (pair d e) ) (f (pair d e‚Ä≤)))
  ‚Üí monotone-fun nats¬≤-pos (pos F)

a‚â°b‚â§c‚â°d‚Üía‚â§d : {D : Set} ‚Üí {_‚äë_ : D ‚Üí D ‚Üí Set} ‚Üí {a b c d : D} ‚Üí a ‚â° b ‚Üí b ‚äë c ‚Üí c ‚â° d ‚Üí a ‚äë d
a‚â°b‚â§c‚â°d‚Üía‚â§d refl b‚äëc refl = b‚äëc

g (f[d·µ¢e‚±º] {D} {E} {F} c f mon-arg-1 mon-arg-2) ‚ü® i , j ‚ü© = let d·µ¢ = g (monotone (proj‚ÇÅ-chain c)) i in
                                                            let e‚±º = g (monotone (proj‚ÇÇ-chain c)) j in
                                                            f (pair d·µ¢ e‚±º)


mon (f[d·µ¢e‚±º] {D} {E} {F} c f mon-arg-1 mon-arg-2) {‚ü® i , j ‚ü©} {‚ü® i‚Ä≤ , j‚Ä≤ ‚ü©} ‚ü® i‚â§i‚Ä≤ , j‚â§j‚Ä≤ ‚ü© =
  a‚â°b‚â§c‚â°d‚Üía‚â§d
    {A (pos F)} {R (pos F)}
    {f (pair ((g (monotone c)) i fzero) (g (monotone c) j (fsucc fzero)))}
    {g (slide-33-prop {D} {E} {F} f mon-arg-1 mon-arg-2) (pair ((g (monotone c)) i fzero) (g (monotone c) j (fsucc fzero))) }
    {g (slide-33-prop {D} {E} {F} f mon-arg-1 mon-arg-2) (pair ((g (monotone c)) i‚Ä≤ fzero) (g (monotone c) j‚Ä≤ (fsucc fzero)))}
    {f (pair ((g (monotone c)) i‚Ä≤ fzero) (g (monotone c) j‚Ä≤ (fsucc fzero)))}
      refl
      (mon (slide-33-prop {D} {E} {F} f mon-arg-1 mon-arg-2) Œª {fzero ‚Üí mon (monotone c) i‚â§i‚Ä≤ fzero; (fsucc fzero) ‚Üí mon (monotone c) j‚â§j‚Ä≤ (fsucc fzero)})
      refl

mon (slide-33-prop-cont {D} {E} {F} f mon-arg-1 mon-arg-2 _ _) = slide-33-prop {D} {E} {F} f mon-arg-1 mon-arg-2
lub-preserve (slide-33-prop-cont {D} {E} {F} f mon-arg-1 mon-arg-2 cont-arg-1 cont-arg-2) c =
  let f-mon = slide-33-prop {D} {E} {F} f mon-arg-1 mon-arg-2 in
  let ‚äîd‚Çô = ‚äî (chain-complete D (posets2.proj‚ÇÅ-chain c)) in
  let ‚äîe‚Çô = ‚äî (chain-complete E (posets2.proj‚ÇÇ-chain c)) in
  let ‚äî[d‚Çôe‚Çô] = ‚äî (chain-complete (domain-product D E) c) in
  let ‚äî·µ¢f[d·µ¢,‚äîe‚±º] = ‚äî (chain-complete F ([d‚Çô,e‚Çô],f‚Üíf[d‚Çô,‚äîe‚±º] {D} {E} {F} c f-mon)) in
  let ‚äî·µ¢‚äî‚±ºf[d·µ¢,e‚±º] = ‚äî (chain-complete F ([d‚Çô,e‚Çô],f‚Üí‚äî‚±º[f[d‚Çô,e‚±º]] {D} {E} {F} c f-mon)) in
  begin
    f ‚äî[d‚Çôe‚Çô]
  ‚â°‚ü® cong f (Eq.sym pair-Œ∑) ‚ü©
    f (pair (‚äîd‚Çô) (‚äîe‚Çô))
  ‚â°‚ü® cont-arg-1 {c} {‚äîe‚Çô} ‚ü©
    ‚äî (chain-complete F (chain-map (chain-fix-e-slide-33 c ‚äîe‚Çô) f-mon))
  ‚â°‚ü® posets2.same-f-same-lub {F} {chain-map (chain-fix-e-slide-33 c ‚äîe‚Çô) f-mon} {[d‚Çô,e‚Çô],f‚Üíf[d‚Çô,‚äîe‚±º] {D} {E} {F} c f-mon}
      (posets2.function-extensionality Œª n ‚Üí
        cong f (posets2.dependent-function-extensionality Œª {fzero ‚Üí refl; (fsucc fzero) ‚Üí refl}))
   ‚ü©
    ‚äî·µ¢f[d·µ¢,‚äîe‚±º]
  ‚â°‚ü® posets2.same-f-same-lub
       {F} {[d‚Çô,e‚Çô],f‚Üíf[d‚Çô,‚äîe‚±º] c f-mon} {{!!}}
       (posets2.function-extensionality Œª n ‚Üí cont-arg-2 {c} {g (monotone (proj‚ÇÅ-chain {D} {E} c)) n})
   ‚ü©
     {!!}                
  ‚â°‚ü® {!!} ‚ü©
    ‚äî·µ¢‚äî‚±ºf[d·µ¢,e‚±º]
  ‚â°‚ü® same-f-same-lub
       {F} {[d‚Çô,e‚Çô],f‚Üí‚äî‚±º[f[d‚Çô,e‚±º]] c f-mon} {posets2.chain-‚äîf‚Çô‚Çñ-with-n-fixed F (f[d·µ¢e‚±º] {D} {E} {F} c f mon-arg-1 mon-arg-2)}
       (posets2.function-extensionality Œª x ‚Üí {!!})
   ‚ü©
    ‚äî (chain-complete F (posets2.chain-‚äîf‚Çô‚Çñ-with-n-fixed F (f[d·µ¢e‚±º] {D} {E} {F} c f mon-arg-1 mon-arg-2)))
  ‚â°‚ü® posets2.diagonalising-lemma-1 F (f[d·µ¢e‚±º] {D} {E} {F} c f mon-arg-1 mon-arg-2) ‚ü©
    ‚äî (chain-complete F (posets2.f‚Çñ‚Çñ-chain F (f[d·µ¢e‚±º] {D} {E} {F} c f mon-arg-1 mon-arg-2)))
  ‚â°‚ü® same-f-same-lub
       {F} {posets2.f‚Çñ‚Çñ-chain F (f[d·µ¢e‚±º] {D} {E} {F} c f mon-arg-1 mon-arg-2)} {chain-map c f-mon}
       (posets2.function-extensionality (Œª x ‚Üí cong f pair-Œ∑))
   ‚ü©
    ‚äî (chain-complete F (chain-map c f-mon))
  ‚àé

if-g : ‚àÄ {D} ‚Üí A (pos (domain-product ùîπ‚ä• (domain-product D D))) ‚Üí A (pos D)
if-g {D} x with (x fzero)
...                     | inj false = x (fsucc fzero) (fsucc fzero)
...                     | inj true  = x (fsucc fzero) fzero
...                     | ‚ä•‚ÇÅ        = posets2.least-element.‚ä• (bottom D)


if-mon-first : {D : domain} ‚Üí {b b‚Ä≤ : A (pos ùîπ‚ä•)} ‚Üí {e : A (pos (domain-product D D))} ‚Üí (R (pos ùîπ‚ä•)) b b‚Ä≤ ‚Üí (R (pos D)) (if-g {D} (pair b e) ) (if-g {D} (pair b‚Ä≤ e))


if-mon-first {D} z‚âºn = posets2.least-element.‚ä•-is-bottom (bottom D)
if-mon-first {D} x‚âºx = reflexive (pos D)

if-mon-second : {D : domain} ‚Üí ({b : posets2.B‚ä• Bool} ‚Üí {e e‚Ä≤ : A (pos (domain-product D D))} ‚Üí (R (pos (domain-product D D))) e e‚Ä≤ ‚Üí (R (pos D)) (if-g {D} (pair b e)) (if-g {D} (pair b e‚Ä≤)))
if-mon-second {D} {‚ä•‚ÇÅ} a = posets2.least-element.‚ä•-is-bottom (domain.bottom D)
if-mon-second {D} {inj false} e‚â§e‚Ä≤ = e‚â§e‚Ä≤ (fsucc fzero) 
if-mon-second {D} {inj true} e‚â§e‚Ä≤ = e‚â§e‚Ä≤ fzero

if-cont-first : ‚àÄ {D}
  ‚Üí {c : chain (pos (domain-product ùîπ‚ä• (domain-product D D)))}
  ‚Üí {e : A (pos (domain-product D D))}
  ‚Üí if-g (pair (‚äî (chain-complete ùîπ‚ä• (posets2.proj‚ÇÅ-chain c))) e)
    ‚â°
    ‚äî (chain-complete D (chain-map (chain-fix-e-slide-33 c e) (slide-33-prop {ùîπ‚ä•} {domain-product D D} {D} if-g (if-mon-first {D}) (if-mon-second {D}))))

if-cont-first {D} {c} {e} = {!!}


if-cont-second : ‚àÄ {D}
  ‚Üí {c : chain (pos (domain-product ùîπ‚ä• (domain-product D D)))}
  ‚Üí {d : A (pos ùîπ‚ä•)}
  ‚Üí if-g (pair d (‚äî (chain-complete (domain-product D D) (proj‚ÇÇ-chain c))))
    ‚â°
    ‚äî (chain-complete D (chain-map (chain-fix-d-slide-33 c d) (slide-33-prop {ùîπ‚ä•} {domain-product D D} {D} if-g (if-mon-first {D}) (if-mon-second {D}))))

if-cont-second {D} {c} {‚ä•‚ÇÅ} =
  begin
    if-g (pair ‚ä•‚ÇÅ (‚äî (chain-complete (domain-product D D) (proj‚ÇÇ-chain c))))
  ‚â°‚ü® refl ‚ü©
    posets2.least-element.‚ä• (bottom D)
  ‚â°‚ü® antisymmetric (pos D)
       (least-element.‚ä•-is-bottom (bottom D))
       (lub2 (chain-complete D (chain-map (chain-fix-d-slide-33 c ‚ä•‚ÇÅ) (slide-33-prop if-g if-mon-first if-mon-second))) Œª {n} ‚Üí reflexive (pos D))
   ‚ü©
    ‚äî (chain-complete D (chain-map (chain-fix-d-slide-33 c ‚ä•‚ÇÅ) (slide-33-prop if-g if-mon-first if-mon-second)))
  ‚àé
if-cont-second {D} {c} {inj true} =
  begin
    if-g (pair (inj true) (‚äî (chain-complete (domain-product D D) (proj‚ÇÇ-chain c))))
  ‚â°‚ü® refl ‚ü©
    ‚äî (chain-complete D (proj‚ÇÅ-chain (proj‚ÇÇ-chain c)))
  ‚â°‚ü® same-f-same-lub
       {D} {proj‚ÇÅ-chain (proj‚ÇÇ-chain c)} {chain-map (chain-fix-d-slide-33 c (inj true)) (slide-33-prop if-g if-mon-first if-mon-second)}
       refl
   ‚ü©
    ‚äî (chain-complete D (chain-map (chain-fix-d-slide-33 c (inj true)) (slide-33-prop if-g if-mon-first if-mon-second)))
  ‚àé
if-cont-second {D} {c} {inj false} =
  begin
    if-g (pair (inj false) (‚äî (chain-complete (domain-product D D) (proj‚ÇÇ-chain c))))
  ‚â°‚ü® refl ‚ü©
    ‚äî (chain-complete D (proj‚ÇÇ-chain (proj‚ÇÇ-chain c)))
  ‚â°‚ü® same-f-same-lub
       {D} {proj‚ÇÇ-chain (proj‚ÇÇ-chain c)} {chain-map (chain-fix-d-slide-33 c (inj false)) (slide-33-prop if-g if-mon-first if-mon-second)}
       refl
   ‚ü©
    ‚äî (chain-complete D (chain-map (chain-fix-d-slide-33 c (inj false)) (slide-33-prop if-g if-mon-first if-mon-second)))
  ‚àé

if-cont : ‚àÄ {D} ‚Üí cont-fun (domain-product ùîπ‚ä• (domain-product D D)) D
if-mon : ‚àÄ {D} ‚Üí monotone-fun (posets2.product-pos ùîπ‚ä• (domain-product D D)) (pos D)
if-mon {D} = slide-33-prop {ùîπ‚ä•} {domain-product D D} {D} if-g (if-mon-first {D}) (if-mon-second {D})

if-cont {D} = slide-33-prop-cont {ùîπ‚ä•} {domain-product D D} {D} if-g (if-mon-first {D}) if-mon-second if-cont-first if-cont-second
